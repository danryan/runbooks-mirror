local services = import './services/all.jsonnet';
local configMap = import 'recording-rule-config-map.libsonnet';

local outputPromYaml(groups) =
  std.manifestYamlDoc({
    groups: groups,
  });

// Select all services with `autogenerateRecordingRules` (default on)
local selectedServices = std.filter(function(service) service.autogenerateRecordingRules, services);

{
  'service-slos.yml':
    outputPromYaml([{
      name: 'Autogenerated Service SLOs',
      interval: '5m',
      partial_response_strategy: 'warn',
      rules:
        configMap.thanos.serviceSLOs.generateRecordingRulesForServices(selectedServices) +
        configMap.thanos.serviceMapping.generateRecordingRulesForServices(selectedServices),
    }]),

  'deployment-health.yml':
    outputPromYaml([{
      name: 'Autogenerated Deployment Health Indicators',
      interval: '1m',
      partial_response_strategy: 'warn',
      rules: configMap.thanos.deploymentHealth.generateRecordingRules(),
    }]),
}
