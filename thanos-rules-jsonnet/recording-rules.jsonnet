local thresholds = import 'mwmbr/thresholds.libsonnet';
local recordingRules = import 'recording-rules/recording-rules.libsonnet';
local strings = import 'utils/strings.libsonnet';
local separateGlobalRecordingFiles = (import 'recording-rules/lib/thanos/separate-global-recording-files.libsonnet').separateGlobalRecordingFiles;
local serviceSlosRules = import 'recording-rules/service-slos.libsonnet';
local monitoredServices = (import 'gitlab-metrics-config.libsonnet').monitoredServices;

local outputPromYaml(groups) =
  std.manifestYamlDoc({
    groups: groups,
  });

local serviceSlosYaml =
  // We can safely exclude dangerouslyThanosEvaluated services
  // from the component mappings, since these are included in the
  // autogenerated-key-metrics-<service>.yml file
  local componentMappingServices = std.filter(function(s) !s.dangerouslyThanosEvaluated, monitoredServices);
  {
    'service-slos.yml': outputPromYaml([{
      name: 'Autogenerated Service SLOs',
      interval: '5m',
      partial_response_strategy: 'warn',
      rules: serviceSlosRules.rules(componentMappingServices),
    }]),
  };

separateGlobalRecordingFiles(
  function(selector)
    std.foldl(
      function(result, threshold)
        local filename = '%(name)s-health' % { name: threshold.name };
        local content = outputPromYaml([{
          name: 'Autogenerated %(name)s Health Indicators' % {
            name: strings.capitalizeFirstLetter(threshold.name),
          },
          interval: '1m',
          partial_response_strategy: 'warn',
          rules: recordingRules.thresholdHealthRuleSet(threshold, selector),
        }]);
        result { [filename]: content },
      thresholds.knownOtherThresholds,
      {},
    )
) + serviceSlosYaml
