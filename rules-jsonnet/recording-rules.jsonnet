local recordingRuleRenderer = import './lib/recording_rule_renderer.libsonnet';
local services = import './services/all.jsonnet';

local outputPromYaml(groups) =
  std.manifestYamlDoc({
    groups: groups,
  });

// Select all services with `autogenerateRecordingRules` (default on)
local selectedServices = std.filter(function(service) ({ autogenerateRecordingRules: true } + service).autogenerateRecordingRules, services);

{
  ['key-metrics-%s.yml' % [service.type]]:
    outputPromYaml(
      [{
        name: 'Autogenerated Component-Level SLIs: %s' % [service.type],
        interval: '1m',
        rules: recordingRuleRenderer.keyMetrics([service]),
      }]
      +
      if ({ nodeLevelMonitoring: false } + service).nodeLevelMonitoring then
        [{
          name: 'Autogenerated Node-Level SLIs: %s' % [service.type],
          interval: '1m',
          rules: recordingRuleRenderer.nodeMetrics([service]),
        }]
      else
        []
    )
  for service in services
} {
  'service-slos.yml':
    outputPromYaml([{
      name: 'Autogenerated Service SLOs',
      interval: '5m',
      rules: recordingRuleRenderer.serviceSLOs(selectedServices),
    }]),
  'error-ratios.yml':
    outputPromYaml([{
      name: 'Autogenerated Multiwindow Errors Ratios',
      interval: '1m',
      rules: recordingRuleRenderer.multiwindowErrorRatios(),
    }]),
}
