local services = (import 'gitlab-metrics-config.libsonnet').monitoredServices;
local recordingRules = import 'recording-rules/recording-rules.libsonnet';

// Select all services with `autogenerateRecordingRules` (default on)
local selectedServices = std.filter(function(service) service.autogenerateRecordingRules, services);
// The SLOs, and component mappings are the same across environments. So they
// are not separated per file
//
// The service SLO rules map SLOs to static recording rules,
// for use in alerting, dashboards, etc
local serviceSLOs = recordingRules.serviceSLORuleSetGenerator();

// Component mappings are static recording rules which help
// determine whether a component is being monitored. This helps
// prevent spurious alerts when a component is decommissioned.
local serviceMapping = recordingRules.serviceMappingRuleSetGenerator();
local componentMappingRuleSetGenerator = recordingRules.componentMappingRuleSetGenerator();

local rules =
  std.flatMap(
    function(serviceDefinition)
      serviceSLOs.generateRecordingRulesForService(serviceDefinition),
    selectedServices
  )
  +
  std.flatMap(
    function(serviceDefinition)
      serviceMapping.generateRecordingRulesForService(serviceDefinition),
    selectedServices
  )
  +
  std.flatMap(
    function(serviceDefinition)
      componentMappingRuleSetGenerator.generateRecordingRulesForService(serviceDefinition),
    // We can safely exclude dangerouslyThanosEvaluated services
    // from the component mappings, since these are included in the
    // autogenerated-key-metrics-<service>.yml file
    std.filter(function(s) !s.dangerouslyThanosEvaluated, selectedServices)
  );


rules
