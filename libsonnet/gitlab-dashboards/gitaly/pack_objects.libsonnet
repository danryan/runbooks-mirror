local basic = import 'grafana/basic.libsonnet';
local selectors = import 'promql/selectors.libsonnet';

{
  in_process(selectorHash, legend)::
    basic.timeseries(
      title='Gitaly pack-objects concurrency',
      query=|||
        max(gitaly_pack_objects_in_progress{%(selector)s}) by (fqdn)
      ||| % { selector: selectors.serializeHash(selectorHash) },
      legendFormat=legend,
      interval='$__interval',
      linewidth=1,
    ),
  queued_commands(selectorHash, legend)::
    basic.timeseries(
      title='Gitaly pack-objects queued commands (gauage)',
      query=|||
        max(gitaly_pack_objects_queued{%(selector)s}) by (fqdn)
      ||| % { selector: selectors.serializeHash(selectorHash) },
      legendFormat=legend,
      interval='$__interval',
      linewidth=1,
    ),
  dropped_commands(selectorHash, legend)::
    basic.timeseries(
      title='Gitaly pack-objects dropped commands (RPS)',
      query=|||
        sum(rate(gitaly_pack_objects_dropped_total{%(selector)s}[$__rate_interval])) by (fqdn)
      ||| % { selector: selectors.serializeHash(selectorHash) },
      legendFormat=legend,
      interval='$__interval',
      linewidth=1,
    ),
  cache_lookup(selectorHash, legend)::
    basic.timeseries(
      title='Gitaly pack-objects cache',
      query=|||
        sum(rate(gitaly_pack_objects_cache_lookups_total{%(selector)s}[$__rate_interval])) by (result)
      ||| % { selector: selectors.serializeHash(selectorHash) },
      legendFormat=legend,
      interval='$__interval',
      linewidth=1,
    ),
  cache_served(selectorHash, legend)::
    basic.timeseries(
      title='Gitaly pack-objects cache served bytes',
      query=|||
        sum(rate(gitaly_pack_objects_served_bytes_total{%(selector)s}[$__rate_interval])) by (fqdn)
      ||| % { selector: selectors.serializeHash(selectorHash) },
      legendFormat=legend,
      format='bytes',
      interval='$__interval',
      linewidth=1,
    ),
  cache_generated(selectorHash, legend)::
    basic.timeseries(
      title='Gitaly pack-objects cache generated bytes',
      query=|||
        sum(rate(gitaly_pack_objects_generated_bytes_total{%(selector)s}[$__rate_interval])) by (fqdn)
      ||| % { selector: selectors.serializeHash(selectorHash) },
      legendFormat=legend,
      format='bytes',
      interval='$__interval',
      linewidth=1,
    ),
}
