#!/usr/bin/env ruby
# frozen_string_literal: true

require 'yaml'

ValidationError = Class.new(StandardError)

class Validator
  def initialize
    @context = []
    @failures = []
    @service_catalog = YAML.load_file(File.join(__dir__, "..", "services", "service-catalog.yml"))
    @service_catalog_teams = @service_catalog["teams"].collect { |team| [team["name"], team] }.to_h
  end

  private

  # Add a validation warning
  def validation_warning(message)
    @failures << { context: @context.dup, level: :warn, message: message }
  end

  # Add a validation error
  def validation_error(message)
    @failures << { context: @context.dup, level: :error, message: message }
  end

  # Add a validation failure and abort the current validation
  def validation_fatal(message)
    @failures << { context: @context.dup, level: :error, message: message }
    raise ValidationError
  end

  # Ensures that the rule has valid annotations
  def validate_alert_rule_annotations(rule, thanos_evaluation)
    annotations = rule["annotations"]
    validation_fatal("rules must contain a `title` annotation") unless annotations["title"]

    if annotations["description"]
      validation_error("Don't repeat yourself. Description contains a repeat of the title. Title is #{annotations['title']}") if annotations["description"].include? annotations["title"]
    else
      validation_warning("rules should contain a `description` annotation")
    end

    if annotations["runbook"]
      runbook_relative_link = annotations["runbook"]
      runbook_file = runbook_relative_link.gsub(/#.*$/, "")
      # We can't validate files that include template values eg: "{{ $labels.type }}"
      # but for other files, ensure that they exist
      validation_error("rule references a non-existent runbook #{runbook_file}") if !runbook_file.include?("{{") && !File.file?(File.join(__dir__, "..", runbook_file))
    else
      validation_warning("alerts should reference a runbook")
    end

    # Check that all label attributes are strings since non-string values, while being technically valid,
    # will trip-up the Prometheus Operator, leading to downstream failures.
    # Validate this here to catch this exception early
    annotations.each do |key, value|
      validation_error("All attribute values must be strings. labels.#{key} is a #{value.class}") unless value.is_a?(String)
    end

    validation_error("channel annotations have been removed in favour of team labels, please use a team label instead") if annotations["channel"]
  end

  def validate_pager_severity_labels(rule, thanos_evaluation)
    labels = rule["labels"]

    if labels["pager"]
      validation_error("rules contains an invalid `pager` label: #{labels['pager']}") unless %w[pagerduty issue].include?(labels["pager"])
      validation_error("only severity s1 and s2 errors should page") unless (labels["severity"] == "s1") || (labels["severity"] == "s2")
      validation_error("'pager: issue' alerts need a project label") if (labels["pager"] == "issue") && labels["project"].nil?
    elsif (labels["severity"] == "s1") || (labels["severity"] == "s2")
      validation_error("s1 and s2 alerts must be configured to send to pagerduty")
    end
  end

  def validate_label_team(rule, thanos_evaluation)
    labels = rule["labels"]
    team = @service_catalog_teams[labels["team"]]

    validation_error("Team labels should refer to valid teams in the service catalog. No #{labels['team']} team was found") unless team
  end

  # Ensures that the rule conforms to our labeling rules
  def validate_alert_rule_labels(rule, thanos_evaluation)
    labels = rule["labels"]

    validation_error("rules must contain a `severity` label") unless labels["severity"]
    validation_error("rules contains an invalid `severity` label: #{labels['severity']}") unless %w[s1 s2 s3 s4].include?(labels["severity"])
    validation_error("alerts must include an alert_type label. This label should either be 'cause' or 'symptom'. For more information on cause and symptom-based alerts, review http://landing.google.com/sre/sre-book/chapters/monitoring-distributed-systems/#symptoms-versus-causes-g0sEi4") unless %w[cause heartbeat symptom].include?(labels["alert_type"])

    validate_pager_severity_labels(rule, thanos_evaluation)

    # Check that all label values are strings since non-string values, while being technically valid,
    # will trip-up the Prometheus Operator, leading to downstream failures.
    # Validate this here to catch this exception early
    labels.each do |key, value|
      validation_error("All label values must be strings. labels.#{key} is a #{value.class}") unless value.is_a?(String)
    end

    validation_error("channels have been removed in favour of teams, please use a team label instead") if labels["channel"]

    validate_label_team(rule, thanos_evaluation) if labels["team"]
  end

  def validate_rule(rule, thanos_evaluation)
    return if rule["record"] # Don't validate recordings

    alert = rule["alert"]
    validation_fatal("Rules must contain an `alert` attribute") unless alert

    @context << "alert: #{alert}"
    begin
      validate_alert_rule_annotations(rule, thanos_evaluation)
      validate_alert_rule_labels(rule, thanos_evaluation)
    ensure
      @context.pop
    end
  end

  def validate_group(group, thanos_evaluation)
    name = group["name"]
    @context << "group: #{name}"

    begin
      begin
        if thanos_evaluation
          # Partial Response Strategy:
          # See https://github.com/thanos-io/thanos/blob/master/docs/components/rule.md#partial-response
          partial_response_strategy = group["partial_response_strategy"]

          validation_error("group should include an explicit partial_response_strategy value. The default is 'abort' but because of the way we use Thanos Ruler, many of our rules will use 'warn' and therefore we prefer this to be explicitly set.") unless partial_response_strategy
          validation_error("group should have an partial_response_strategy value of 'warn' or 'abort'.") unless %w[warn abort].include?(partial_response_strategy)
        end

        rules = group["rules"]
        rules.each do |rule|
          validate_rule rule, thanos_evaluation
        rescue ValidationError
          # Continue onto next rule after validation failure
        end
      end
    ensure
      @context.pop
    end
  end

  def validate_file(alert_file_path, thanos_evaluation)
    @context << "file: #{alert_file_path}"
    begin
      alert_yaml = YAML.load_file(alert_file_path)
      raise "Invalid configuration" unless alert_yaml

      groups = alert_yaml["groups"]
      groups.each do |group|
        validate_group group, thanos_evaluation
      rescue ValidationError
        # Continue onto next group after validation failure
      end
    ensure
      @context.pop
    end
  end

  public

  # Validates Prometheus and Thanos rules
  # Returns true if validation succeeded
  def validate
    # Check Prometheus rules
    alert_files = File.join(__dir__, "..", "rules", "*.yml")
    Dir[alert_files].each do |file|
      validate_file File.expand_path(file), false
    end

    # Check Thanos rules
    thanos_alert_files = File.join(__dir__, "..", "thanos-rules", "*.yml")
    Dir[thanos_alert_files].each do |file|
      validate_file File.expand_path(file), true
    end

    has_errors = false
    @failures.each do |failure|
      has_errors = true if failure[:level] == :error

      warn "#{failure[:level]}: #{failure[:context].join(', ')}: #{failure[:message]}"
    end

    !has_errors
  end
end

begin
  exit 1 unless Validator.new.validate
rescue StandardError => e
  warn "error: #{e.message}"
  warn e.backtrace.join("\n")
  exit 1
end
