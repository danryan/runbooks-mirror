#!/usr/bin/env ruby

require 'yaml'
require 'logger'

LOGGER = Logger.new(STDERR)
LOGGER.level = Logger::DEBUG

def validate_rule(alert_file_path, rule)
  return if rule["record"] # Don't validate recordings

  annotations = rule["annotations"]
  labels = rule["labels"]
  alert = rule["alert"]

  raise StandardError, "Rules must contain an `alert` attribute" unless alert

  raise StandardError, "#{alert}: rules must contain a `title` annotation" unless annotations["title"]

  LOGGER.warn "#{alert_file_path}: #{alert}: Rules should contain a `description` annotation" unless annotations["description"]

  raise StandardError, " #{alert}: rules must contain a `severity` label" unless labels["severity"]
  raise StandardError, " #{alert}: rules contains an invalid `severity` label: #{labels["severity"]}" unless ["warn", "error", "critical"].include?(labels["severity"])

  if labels["pager"]
    raise StandardError, " #{alert}: rules contains an invalid `pager` label: #{labels["pager"]}" unless labels["pager"] == "pagerduty"
    raise StandardError, " #{alert}: only severity critical errors should page" unless labels["severity"] == "critical"
  else
    raise StandardError, " #{alert}: critical alerts should be configured to send to pagerduty" if labels["severity"] == "critical"
  end

  if annotations["runbook"]
    runbook_relative_link = annotations["runbook"]
    runbook_file = runbook_relative_link.gsub(/#.*$/, "")
    # We can't validate files that include template values eg: "{{ $labels.type }}"
    # but for other files, ensure that they exist
    if !runbook_file.include?("{{") && !File.file?(File.join(__dir__, "..", runbook_file))
      raise StandardError, " #{alert}: rule references a non-existent runbook #{runbook_file}"
    end
  else
    LOGGER.warn "#{alert_file_path}: #{alert}: alerts should reference a runbook"
  end

end

def validate_group(alert_file_path, group)
  name = group["name"]

  begin
    rules = group["rules"]

    rules.each do |rule|
      validate_rule alert_file_path, rule
    end
  rescue StandardError => e
    raise StandardError, "group `#{name}`: #{e.message}"
  end
end

def validate(alert_file_path)
  begin
    alert_yaml = YAML.load_file(alert_file_path)
    raise StandardError, "Invalid configuration" if !alert_yaml

    groups = alert_yaml["groups"]
    groups.each do |group|
      validate_group alert_file_path, group
    end
  rescue StandardError => e
    raise StandardError, "Unable to validate file #{alert_file_path}: #{e.message}"
  end
end

begin
  alert_files = File.join(__dir__, "..", "alerts", "*.yml")
  Dir[alert_files].each do |file|
    validate File.expand_path(file)
  end

rescue StandardError => e
  STDERR.puts "error: #{e.message}"
  exit 1
ensure
  LOGGER.close
end
