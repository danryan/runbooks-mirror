#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

REPO_DIR=$(
  cd "$(dirname "${BASH_SOURCE[0]}")/.."
  pwd
)

# Convert the service catalog yaml into a JSON file in a format thats consumable by jsonnet
ruby -rjson -ryaml -e "puts YAML.load(ARGF.read).to_json" "${REPO_DIR}/services/service-catalog.yml" >"${REPO_DIR}/services/service_catalog.json"

tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'generate-jsonnet-rules')
trap 'rm -rf "${tmpdir}"' EXIT

function render_multi_jsonnet() {
  local dest_dir="$1"
  local filename="$2"

  output_files="$(jsonnet -J "$(dirname "${filename}")" -J "${REPO_DIR}/metrics-catalog" -J "${REPO_DIR}/services" --string --multi "${tmpdir}" "${filename}")"

  warning="# WARNING. DO NOT EDIT THIS FILE BY HAND. USE ${filename} TO GENERATE IT
# YOUR CHANGES WILL BE OVERRIDDEN"

  for i in ${output_files}; do
    local b
    b=$(basename "${i}")

    (
      echo "$warning"
      "${REPO_DIR}/scripts/fix-prom-rules.rb" "${i}"
    ) >"${dest_dir}/autogenerated-${b}"

    rm -f "${i}"
    echo "${dest_dir}/autogenerated-${b}"
  done
}

if [[ $# == 0 ]]; then
  cd "${REPO_DIR}"
  for file in ./rules-jsonnet/*.jsonnet; do
    render_multi_jsonnet "${REPO_DIR}/rules" "${file}"
  done
  for file in ./thanos-rules-jsonnet/*.jsonnet; do
    render_multi_jsonnet "${REPO_DIR}/thanos-rules" "${file}"
  done
else
  for file in "$@"; do
    source_dir=$(dirname "${file}")
    render_multi_jsonnet "${source_dir%-jsonnet}" "${file}"
  done
fi
