#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

REPO_DIR=$(
  cd "$(dirname "${BASH_SOURCE[0]}")/.."
  pwd
)

SKIP_PREFLIGHT_STEPS=${SKIP_PREFLIGHT_STEPS:-0}

if [[ $SKIP_PREFLIGHT_STEPS == 0 ]]; then
  # Check that jsonnet-tool is installed
  "${REPO_DIR}/scripts/ensure-jsonnet-tool.sh"

  # Convert the service catalog yaml into a JSON file in a format thats consumable by jsonnet
  "${REPO_DIR}/scripts/generate-service-catalog-json.sh"
fi

function render_multi_jsonnet() {
  local dest_dir="$1"
  local filename="$2"
  local warning="# WARNING. DO NOT EDIT THIS FILE BY HAND. USE ${filename} TO GENERATE IT
# YOUR CHANGES WILL BE OVERRIDDEN"

  jsonnet-tool yaml \
    --multi "$dest_dir" \
    --header "${warning}" \
    -J "${REPO_DIR}/libsonnet/" \
    -J "${REPO_DIR}/metrics-catalog/" \
    -J "${REPO_DIR}/services/" \
    -J "${REPO_DIR}/vendor/" \
    -P name -P interval -P partial_response_strategy -P rules \
    -P alert -P for -P annotations -P record -P labels -P expr \
    -P title -P description \
    --prefix "autogenerated-" \
    "${filename}"
}

if [[ $# == 0 ]]; then
  cd "${REPO_DIR}"
  export SKIP_PREFLIGHT_STEPS=1
  find ./thanos-rules-jsonnet ./rules-jsonnet -name '*.jsonnet' -print0 |
    xargs -0 -P 0 -n 1 ./scripts/generate-jsonnet-rules.sh
else
  for file in "$@"; do
    source_dir=$(dirname "${file}")
    render_multi_jsonnet "${source_dir%-jsonnet}" "${file}"
  done
fi
