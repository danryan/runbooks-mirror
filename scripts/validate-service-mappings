#!/usr/bin/env ruby
# frozen_string_literal: true
require 'json'

# rubocop:disable Metrics/PerceivedComplexity
# rubocop:disable Metrics/CyclomaticComplexity
# rubocop:disable Metrics/AbcSize
def validate(service_catalog_path)
  service_catalog_yaml = JSON.parse(File.read(service_catalog_path))
  teams = service_catalog_yaml["teams"]
  tiers = service_catalog_yaml["tiers"]
  services = service_catalog_yaml["services"]

  raise "Service catalog must contain one or more teams" unless teams && !teams.empty?
  raise "Service catalog must contain one or more tiers" unless tiers && !tiers.empty?

  team_map = teams.each_with_object({}) { |team, map| map[team["name"]] = team; }
  tier_map = tiers.each_with_object({}) { |tier, map| map[tier["name"]] = tier; }

  teams.each do |team|
    # name
    team_name = team["name"]
    raise "'#{team_name}' | team.name field must be string" unless team_name.is_a? String

    slack_alerts_channel = team["slack_alerts_channel"]
    if slack_alerts_channel
      raise "'#{team_name}' | slack_alerts_channel must be a string" unless slack_alerts_channel.is_a? String
      raise "'#{team_name}' | slack_alerts_channel must not start with a hash" if slack_alerts_channel.start_with?("#")
    end
  end

  services.each do |service|
    # name
    service_name = service["name"]
    raise "'#{service_name}' | service.name field must be string" unless service_name.is_a? String

    # tier
    service_tier = service["tier"]
    raise "'#{service_name}' | tier field must be string" unless service_tier.is_a? String
    raise "unknown tier '#{service['tier']}''" unless tier_map[service["tier"]]

    # team (non-mandatory)
    service_team = service["team"]
    if service_team
      raise "'#{service_name}' | team field must be string" unless service_teams.is_a? String
      raise "'#{service_name}' | unknown team: '#{service_team}''" unless team_map[service_team]
    end

    # friendly_name
    friendly_name = service["friendly_name"]
    raise "'#{service_name}' | service.friendly_name field must be string" unless friendly_name.is_a? String

    # label
    service_label = service["label"]
    raise "'#{service_name}' | label field must be string" unless service_label.is_a? String

    # Business
    # =========
    business = service["business"]

    # Business requirements are optional for purely technical services
    if business
      # requirement
      requirement = business["requirement"]
      raise "'#{service_name}' | requirement field must be string" unless requirement.is_a? String

      # customers
      requirement = business["customers"]
      raise "'#{service_name}' | customers field must be list" unless requirement.is_a? Array

      # business_value
      value = business["business_value"]
      raise "'#{service_name}' | business_value field must be string" unless value.is_a? String

      # availability
      availability = business["SLA"]["availability"]
      raise "'#{service_name}' | availability field must be string" unless availability.is_a?(String) || availability.nil?

      # response_time
      response_time = business["SLA"]["response_time"]
      raise "'#{service_name}' | response_time field must be string" unless response_time.is_a?(String) || response_time.nil?
    end

    # Technical
    # =========

    # project
    project = service.dig("technical", "project")
    raise "'#{service_name}' | project field must be list" unless project.is_a?(Array) || project.nil?

    # slx
    slx = service.dig("technical", "slx")
    raise "'#{service_name}' | slx field must be string" unless slx.is_a?(String) || slx.nil?

    # design
    design_doc = service.dig("technical", "documents", "design")
    raise "'#{service_name}' | design document field must be string" unless design_doc.is_a?(String) || design_doc.nil?

    # architecture
    architecture_doc = service.dig("technical", "documents", "architecture")
    raise "'#{service_name}' | architecture document field must be string" unless architecture_doc.is_a?(String) || architecture_doc.nil?

    # service
    service_doc = service.dig("technical", "documents", "service")
    raise "'#{service_name}' | service document field must be list" unless service_doc.is_a?(Array) || service_doc.nil?

    # security
    security_doc = service.dig("technical", "documents", "security")
    raise "'#{service_name}' | security document field must be string" unless security_doc.is_a?(String) || security_doc.nil?

    # dependencies
    dependencies = service.dig("technical", "dependencies")
    raise "'#{service_name}' | dependencies field must be list" unless dependencies.is_a?(Array) || dependencies.nil?

    dependencies&.each do |dependency|
      raise "'#{service_name}' | dependency value must be string" unless dependency["service"].is_a?(String) || dependency["service"].nil?
    end

    # configurations
    configurations = service.dig("technical", "configurations")
    raise "'#{service_name}' | configurations field must be list" unless configurations.is_a?(Array) || configurations.nil?

    configurations&.each do |configuration|
      raise "'#{service_name}' | config_name value must be string" unless configuration["config_name"].is_a?(String) || configuration["config_name"].nil?
      raise "'#{service_name}' | location value must be string" unless configuration["location"].is_a?(String) || configuration["location"].nil?
    end

    # chef_roles
    chef_roles = service.dig("technical", "chef_roles")
    raise "'#{service_name}' | chef_roles field must be list" unless chef_roles.is_a?(Array) || chef_roles.nil?

    # scalability
    scalability = service.dig("technical", "scalability")

    if scalability
      # node
      node = scalability["note"]
      raise "'#{service_name}' | node field must be string" unless node.is_a?(String) || node.nil?

      # bound
      bound = scalability["bound"]
      raise "'#{service_name}' | bound field must be string" unless bound.is_a?(String) || bound.nil?

      # scalable
      scalable = scalability["scalable"]
      raise "'#{service_name}' | scalable field must be string" unless scalable.is_a?(String) || scalable.nil?
    end

    # security_reviewed
    security = service.dig("technical", "security")

    if security
      security_reviewed = security["security_reviewed"]
      raise "'#{service_name}' | security_reviewed field must be string" unless security_reviewed.is_a?(String) || security_reviewed.nil?

      # data_classification
      data_classification = security["data_classification"]
      raise "'#{service_name}' | data_classification field must be string" unless data_classification.is_a?(String) || data_classification.nil?

      # security_incidents
      security_incidents = security["security_incidents"]
      raise "'#{service_name}' | security_incidents field must be list" unless security_incidents.is_a?(Array) || security_incidents.nil?
    end

    # logging
    logging = service.dig("technical", "logging")
    if logging
      raise "'#{service_name}' | logging field must be list" unless logging.is_a? Array
      raise "service '#{service_name}' requires at least one logging configuration" if logging.empty?

      logging.each do |log|
        raise "'#{service_name}' | log name field must be string" unless log["name"].is_a?(String) || log["name"].nil?
        raise "'#{service_name}' | log permalink field must be string" unless log["permalink"].is_a?(String) || log["permalink"].nil?
      end
    end

    # provider
    provider = service.dig("infrastructure", "provider")
    raise "'#{service_name}' | provider field must be string" unless provider.is_a? String

    # architecture
    architecture = service.dig("infrastructure", "architecture")
    raise "'#{service_name}' | architecture field must be string" unless architecture.is_a?(String) || architecture.nil?

    # provisioning
    provisioning = service.dig("infrastructure", "provisioning")
    raise "'#{service_name}' | provisioning field must be string" unless provisioning.is_a?(String) || provisioning.nil?

    # accesses
    accesses = service.dig("infrastructure", "accesses")
    raise "'#{service_name}' | accesses field must be list" unless accesses.is_a?(Array) || accesses.nil?

    accesses&.each do |access|
      raise "'#{service_name}' | access account_name field must be string" unless access["account_name"].is_a?(Array) || access["account_name"].nil?
      raise "'#{service_name}' | access access_type field must be string" unless access["access_type"].is_a?(Array) || access["access_type"].nil?
      raise "'#{service_name}' | access reviewed field must be string" unless access["reviewed"].is_a?(Array) || access["reviewed"].nil?
    end

    # maintenance
    maintenance = service.dig("operations", "maintenance")
    raise "'#{service_name}' | maintenance field must be string" unless maintenance.is_a?(String) || maintenance.nil?

    # runbooks
    runbooks = service.dig("operations", "runbooks")
    raise "'#{service_name}' | runbooks field must be list" unless runbooks.is_a?(Array) || runbooks.nil?

    # playbooks
    playbooks = service.dig("operations", "playbooks")
    raise "'#{service_name}' | playbooks field must be list" unless playbooks.is_a?(Array) || playbooks.nil?

    # error_budget
    error_budget = service.dig("operations", "error_budget")
    raise "'#{service_name}' | error_budget field must be string" unless error_budget.is_a?(String) || error_budget.nil?

    # observability
    # monitors
    monitors = service.dig("observability", "monitors")

    unless monitors.nil? # rubocop:disable Style/Next
      if monitors.key?("grafana_folder")
        grafana_folder = monitors["grafana_folder"]
        raise "'#{service_name}' | grafana_folder field must be string" unless grafana_folder.is_a?(String) || grafana_folder.nil?
      end

      if monitors.key?("primary_grafana_dashboard")
        primary_grafana_dashboard = monitors["primary_grafana_dashboard"]
        raise "'#{service_name}' | primary_grafana_dashboard field must be string" unless primary_grafana_dashboard.is_a?(String) || primary_grafana_dashboard.nil?
      end

      if monitors.key?("sentry_slug")
        sentry_slug = monitors["sentry_slug"]
        raise "'#{service_name}' | sentry_slug field must be string" unless sentry_slug.is_a?(String) || sentry_slug.nil?
      end
    end
  end
end
# rubocop:enable Metrics/PerceivedComplexity
# rubocop:enable Metrics/CyclomaticComplexity
# rubocop:enable Metrics/AbcSize

begin
  validate(File.join(__dir__, "..", "services", "service_catalog.json"))
rescue StandardError => e
  warn "error: #{e.stack}"
  exit 1
end
