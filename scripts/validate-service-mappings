#!/usr/bin/env ruby

require 'yaml'

def validate(service_catalog_path)
  service_catalog_yaml = YAML.load_file(service_catalog_path)
  services = service_catalog_yaml["services"]

  raise "Service catalog must contain one or more teams" unless service_catalog_yaml["teams"] && !service_catalog_yaml["teams"].empty?
  raise "Service catalog must contain one or more tiers" unless service_catalog_yaml["tiers"] && !service_catalog_yaml["tiers"].empty?
  raise "Service catalog must contain one or more services" unless services && !services.empty?

  team_map = service_catalog_yaml["teams"].inject({}) { |map, team| map[team["name"]] = team; map }
  tier_map = service_catalog_yaml["tiers"].inject({}) { |map, tier| map[tier["name"]] = tier; map }

  services.each do |service|
    # name
    service_name =service["name"]
    raise "'#{service_name}' | service.name field must be string" unless service_name.is_a? String

    # tier
    service_tier = service["tier"]
    raise "'#{service_name}' | tier field must be string" unless service_tier.is_a? String
    raise "unknown tier '#{service["tier"]}''" unless tier_map[service["tier"]]

    # teams
    service_teams = service["teams"]
    raise "'#{service_name}' | teams field must be list" unless service_teams.is_a? Array

    service_teams.each do |team| 
      raise "'#{service_name}' | unknown team: '#{team}''" unless team_map[team]
    end

    # label
    service_label = service["label"]
    raise "'#{service_name}' | label field must be string" unless service_label.is_a? String

    # Business
    # =========

    # requirement
    requirement = service["business"]["requirement"]
    raise "'#{service_name}' | requirement field must be string" unless requirement.is_a? String

    # customers
    requirement = service["business"]["customers"]
    raise "'#{service_name}' | customers field must be list" unless requirement.is_a? Array

    # business_value
    value = service["business"]["business_value"]
    raise "'#{service_name}' | business_value field must be string" unless value.is_a? String

    # availability
    availability = service["business"]["SLA"]["availability"]
    raise "'#{service_name}' | availability field must be string" unless availability.is_a? String or availability.nil?

    # response_time
    response_time = service["business"]["SLA"]["response_time"]
    raise "'#{service_name}' | response_time field must be string" unless response_time.is_a? String or response_time.nil?
    
    # Technical
    # =========

    # project
    project = service["technical"]["project"]
    raise "'#{service_name}' | project field must be list" unless project.is_a? Array or project.nil?

    # criticality
    criticality = service["technical"]["criticality"]
    raise "'#{service_name}' | criticality field must be integer" unless criticality.is_a? Integer

    # slx
    slx = service["technical"]["slx"]
    raise "'#{service_name}' | slx field must be string" unless slx.is_a? String or slx.nil?

    # design
    design_doc = service["technical"]["documents"]["design"]
    raise "'#{service_name}' | design document field must be string" unless design_doc.is_a? String or design_doc.nil?

    # architecture
    architecture_doc = service["technical"]["documents"]["architecture"]
    raise "'#{service_name}' | architecture document field must be string" unless architecture_doc.is_a? String or architecture_doc.nil?

    # service
    service_doc = service["technical"]["documents"]["service"]
    raise "'#{service_name}' | service document field must be list" unless service_doc.is_a? Array or service_doc.nil?

    # security
    security_doc = service["technical"]["documents"]["security"]
    raise "'#{service_name}' | security document field must be string" unless security_doc.is_a? String or security_doc.nil?

    # dependencies
    dependencies = service["technical"]["dependencies"]
    raise "'#{service_name}' | dependencies field must be list" unless dependencies.is_a? Array or dependencies.nil?

    if !dependencies.nil?
      dependencies.each do |dependency|
        raise "'#{service_name}' | dependency value must be string" unless dependency["service"].is_a? String or dependency["service"].nil?
      end
    end

    # configurations
    configurations = service["technical"]["configurations"]
    raise "'#{service_name}' | configurations field must be list" unless configurations.is_a? Array or configurations.nil?

    if !configurations.nil?
      configurations.each do |configuration|
        raise "'#{service_name}' | config_name value must be string" unless configuration["config_name"].is_a? String or configuration["config_name"].nil?
        raise "'#{service_name}' | location value must be string" unless configuration["location"].is_a? String or configuration["location"].nil?
      end
    end

    # chef_roles
    chef_roles = service["technical"]["chef_roles"]
    raise "'#{service_name}' | chef_roles field must be list" unless chef_roles.is_a? Array or chef_roles.nil?

    # scalability
    # node
    node = service["technical"]["scalability"]["note"]
    raise "'#{service_name}' | node field must be string" unless node.is_a? String or node.nil?

    # bound
    bound = service["technical"]["scalability"]["bound"]
    raise "'#{service_name}' | bound field must be string" unless bound.is_a? String or bound.nil?

    # scalable
    scalable = service["technical"]["scalability"]["scalable"]
    raise "'#{service_name}' | scalable field must be string" unless scalable.is_a? String or scalable.nil?

    # security_reviewed
    security_reviewed = service["technical"]["security"]["security_reviewed"]
    raise "'#{service_name}' | security_reviewed field must be string" unless security_reviewed.is_a? String or security_reviewed.nil?

    # data_classification
    data_classification = service["technical"]["security"]["data_classification"]
    raise "'#{service_name}' | data_classification field must be string" unless data_classification.is_a? String or data_classification.nil?

    # security_incidents
    security_incidents = service["technical"]["security"]["security_incidents"]
    raise "'#{service_name}' | security_incidents field must be list" unless security_incidents.is_a? Array or security_incidents.nil?

    # logging
    logging = service["technical"]["logging"]
    raise "'#{service_name}' | logging field must be list" unless logging.is_a? Array

    logging.each do |log|
      raise "'#{service_name}' | log name field must be string" unless log["name"].is_a? String or log["name"].nil?
      raise "'#{service_name}' | log permalink field must be string" unless log["permalink"].is_a? String or log["permalink"].nil?
    end

    # provider
    provider = service["infrastructure"]["provider"]
    raise "'#{service_name}' | provider field must be string" unless provider.is_a? String

    # architecture
    architecture = service["infrastructure"]["architecture"]
    raise "'#{service_name}' | architecture field must be string" unless architecture.is_a? String or architecture.nil?

    # provisioning
    provisioning = service["infrastructure"]["provisioning"]
    raise "'#{service_name}' | provisioning field must be string" unless provisioning.is_a? String or provisioning.nil?

    # accesses
    accesses = service["infrastructure"]["accesses"]
    raise "'#{service_name}' | accesses field must be list" unless accesses.is_a? Array or accesses.nil?

    if !accesses.nil?
      accesses.each do |access|
        raise "'#{service_name}' | access account_name field must be string" unless access["account_name"].is_a? Array or access["account_name"].nil?
        raise "'#{service_name}' | access access_type field must be string" unless access["access_type"].is_a? Array or access["access_type"].nil?
        raise "'#{service_name}' | access reviewed field must be string" unless access["reviewed"].is_a? Array or access["reviewed"].nil?
      end
    end

    # maintenance
    maintenance = service["operations"]["maintenance"]
    raise "'#{service_name}' | maintenance field must be string" unless maintenance.is_a? String or maintenance.nil?

    # runbooks
    runbooks = service["operations"]["runbooks"]
    raise "'#{service_name}' | runbooks field must be list" unless runbooks.is_a? Array or runbooks.nil?

    # playbooks
    playbooks = service["operations"]["playbooks"]
    raise "'#{service_name}' | playbooks field must be list" unless playbooks.is_a? Array or playbooks.nil?

    # error_budget
    error_budget = service["operations"]["error_budget"]
    raise "'#{service_name}' | error_budget field must be string" unless error_budget.is_a? String or error_budget.nil?

    # observability
    # monitors
    monitors = service["observability"]["monitors"]

    if !monitors.nil?
      if monitors.key?("grafana_folder")
        grafana_folder = monitors["grafana_folder"]
        raise "'#{service_name}' | grafana_folder field must be string" unless grafana_folder.is_a? String or grafana_folder.nil?
      end

      if monitors.key?("primary_grafana_dashboard")
        primary_grafana_dashboard = monitors["primary_grafana_dashboard"]
        raise "'#{service_name}' | primary_grafana_dashboard field must be string" unless primary_grafana_dashboard.is_a? String or primary_grafana_dashboard.nil?
      end

      if monitors.key?("sentry_slug")
        sentry_slug = monitors["sentry_slug"]
        raise "'#{service_name}' | sentry_slug field must be string" unless sentry_slug.is_a? String or sentry_slug.nil?
      end
    end

    raise "service '#{service_name}' requires a criticality attribute" unless service["technical"]["criticality"]
    raise "service '#{service_name}' requires at least one logging configuration" unless service["technical"]["logging"] && !service["technical"]["logging"].empty?
  end
end

begin
  validate(File.join(__dir__, "..", "services", "service-catalog.yml"))
rescue StandardError => e
  STDERR.puts "error: #{e.message}"
  exit 1
end
