#!/usr/bin/env ruby
# frozen_string_literal: true
# rubocop:disable all

require 'optparse'
require 'csv'
require 'cgi'
require 'json'
require 'net/http'

def parse_args
  options = { dry_run: true, wait: 2 * 60 }

  ARGV << '-?' if ARGV.empty?

  OptionParser.new do |opt|
    opt.banner = <<~HEREDOC
      Usage: #{$PROGRAM_NAME} [options] <input-file.csv>
      puts
      Migrate repositories between shards.
      The CSV should input should be in the following format (without headers):
          project (id or full path),source shard,target shard
      Housekeeping will be performed after a move is complete.
      The env variable $PRIVATE_TOKEN will be used to authenticate API requests
    HEREDOC
    opt.separator ''
    opt.separator 'Options:'

    opt.on('-d', '--dry-run=[yes/no]', 'Show what would have been done; default: yes') do |dry_run|
      options[:dry_run] = (dry_run !~ /^(no|false)$/i)
    end

    opt.on('-w', '--wait=<N>', "Timeout in seconds for migration completion per repo; default: #{options[:wait]}") do |wait|
      options[:wait] = [wait.to_i, 5].max
    end

    opt.on_tail('-?', '--help', 'Show this message') do
      puts opt
      exit
    end
  end.parse!

  options
end

def gitlab_client(method, url, body = nil)
  uri = URI(url)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true

  request = case method.downcase
    when 'get'
      Net::HTTP::Get.new(uri)
    when 'post'
      Net::HTTP::Post.new(uri)
    when 'put'
      Net::HTTP::Put.new(uri)
    else
      raise "Unknown method #{method}"
    end

  request["PRIVATE-TOKEN"] = ENV['PRIVATE_TOKEN']
  request.body = body if body

  response = http.request(request)
  raise "Invalid response #{response.code} #{response.body}" unless response.is_a?(Net::HTTPSuccess)

  JSON.parse(response.body)
end

options = parse_args

csv = CSV.new(ARGF)
csv.each do |project, source, target|
  begin
    project_path = "https://gitlab.com/api/v4/projects/#{CGI.escape(project)}"
    project_info = gitlab_client('GET', project_path)

    if project_info['repository_storage'] != source
      raise "Source (#{source}) doesn't match current project storage (#{project_info['repository_storage']})"
    end

    puts "--- Moving #{project_info['path_with_namespace']} from #{source} to #{target}... "

    if options[:dry_run]
      puts 'Running in dry-run mode, nothing done'
      next
    end

    gitlab_client('PUT', project_path, "repository_storage=#{target}")

    print 'Waiting for migration to finish... '
    (options[:wait] / 5).times do
      project_info = gitlab_client('GET', project_path)

      break if project_info['repository_storage'] == target

      sleep 5
    end

    if project_info['repository_storage'] != target
      raise "migration didn't complete in 2 minutes"
    end

    puts 'done'

    print 'Running housekeeping... '
    gitlab_client('POST', "#{project_path}/housekeeping")
    puts 'done'
  rescue RuntimeError => e
    puts "Error moving #{project}: #{e.message}"
    exit
  end
end
