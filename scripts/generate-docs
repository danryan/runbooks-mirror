#!/usr/bin/env ruby

require 'yaml'
require 'erb'
require 'ostruct'

def generate_header(service, team, tier)
  template = <<~EOF
    <!-- MARKER: do not edit this section directly. Edit services/service-mappings.yml then run scripts/generate-docs -->
    #  <%= service["name"].capitalize %> Service

    * **Responsible Team**: [<%= team["name"] %>](<%= team["url"] %>)
    * **Slack Channel**: [\#<%= team["slack_channel"] %>](https://gitlab.slack.com/archives/production/<%= team["slack_channel"] %>)
    <% if service["sentry_slug"] -%>
    * **Sentry**: https://sentry.gitlap.com/<%= service["sentry_slug"] %>
    <% end -%>
    <% if service["grafana_folder"] -%>
    * **Grafana Folder**: https://dashboards.gitlab.net/dashboards/f/<%= service["grafana_folder"] %>
    <% end -%>
    <% if service["elk"] -%>
    * **ELK**: [`<%= service["elk"]["index"] %>`](<%= service["elk"]["permalink"] %>)
    <% end -%>
    <!-- END_MARKER -->
  EOF

  ERB.new(template, 0, "<>-").result(OpenStruct.new({ team: team, service: service, tier: tier }).instance_eval { binding })
end

def generate_docs(service_mapping_path)
  service_mapping_yaml = YAML.load_file(service_mapping_path)
  services = service_mapping_yaml["services"]

  raise "Service mapping must contain one or more teams" unless service_mapping_yaml["teams"] && !service_mapping_yaml["teams"].empty?
  raise "Service mapping must contain one or more tiers" unless service_mapping_yaml["tiers"] && !service_mapping_yaml["tiers"].empty?
  raise "Service mapping must contain one or more services" unless services && !services.empty?

  team_map = service_mapping_yaml["teams"].inject({}) { |map, team| map[team["name"]] = team; map }
  tier_map = service_mapping_yaml["tiers"].inject({}) { |map, tier| map[tier["name"]] = tier; map }

  services.each do |service|
    service_name = service["name"]
    team = team_map[service["team"]]
    tier = tier_map[service["tier"]]

    troubleshooting_doc =  File.join(__dir__, "..", "troubleshooting", "service-#{service_name}.md")
    if File.exist?(troubleshooting_doc)
      puts generate_header(service, team, tier)
    else
      puts generate_header(service, team, tier)
    end
  end
end

begin
  generate_docs(File.join(__dir__, "..", "services", "service-mappings.yml"))
rescue StandardError => e
  STDERR.puts "error: #{e.message}"
  exit 1
end
