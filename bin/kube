#!/usr/bin/env bash

set -efo pipefail

CLUSTERS_JSON="${RUNBOOKS_PATH:?}/kubernetes/clusters.json"

trap ctrl_c INT

ctrl_c() {
  echo "Tunnel is now closed, switching to empty context..."
  kubectl config use-context empty
}

notify_shell() {
  echo "Spinning up a tunnel, this will NOT drop you into a shell prompt, open a new terminal after connection is made..."
}

print_help() {
  echo >&2 "\"kube\" is used to help you setup and interect with our kubernetes clusters"
  echo >&2 "USAGE:"
  echo >&2 "    glsh kube [SUBCOMMAND]"
  echo >&2
  echo >&2 "SUBCOMMANDS:"
  echo >&2 "    setup: Configure the local machine with all cluster contexts"
  echo >&2 "    use-cluster: Specify which cluster to use"
}

print_use_cluster_help() {
  echo >&2 "Choose one of the following clusters:"
  for cluster in $(all_clusters); do
    echo >&2 "    ${cluster}"
  done
}

setup() {
  echo "Running gcloud commands to create kube contexts"
  jq -r '.[] | "\(.name) --project \(.project) --region \(.region)"' "${CLUSTERS_JSON}" | while read -r cluster_params; do
    # shellcheck disable=SC2086
    gcloud container clusters get-credentials ${cluster_params}
  done

  echo "Creating empty cluster context for fallback purposes"
  kubectl config set-context empty
}

use_cluster() {
  context="$(get_kube_context "$1")"
  kubectx "${context}"
  api_ip="$(get_cluster_ip "${context}")"
  ssh_proxy="$(get_ssh_proxy "$1")"

  notify_shell
  sshuttle -r "${ssh_proxy}" "${api_ip}/32"
}

all_clusters() {
  jq -r 'keys[]' "${CLUSTERS_JSON}"
}

has_cluster() {
  jq --arg cluster "$1" -e 'has($cluster)' "${CLUSTERS_JSON}" >/dev/null
}

get_kube_context() {
  jq --arg cluster "$1" -r '.[$cluster] | "gke_\(.project)_\(.region)_\(.name)"' "${CLUSTERS_JSON}"
}

get_ssh_proxy() {
  jq --arg cluster "$1" -r '.[$cluster].ssh_proxy' "${CLUSTERS_JSON}"
}

get_cluster_ip() {
  kubectl config view -o jsonpath="{.clusters[?(@.name == \"$1\")].cluster.server}" | sed 's@^https://@@'
}

check_command() {
  if ! command -v "$1" >/dev/null; then
    echo >&2 "glsh: \"$1\" could not be found, please follow $2"
    exit 1
  fi
}

check_command "gcloud" "https://cloud.google.com/sdk/docs/install"
check_command "jq" "https://stedolan.github.io/jq/download/"
check_command "kubectl" "https://kubernetes.io/docs/tasks/tools/"
check_command "kubectx" "https://github.com/ahmetb/kubectx#installation"
check_command "sshuttle" "https://github.com/sshuttle/sshuttle#obtaining-sshuttle"

if [[ $# -eq 0 ]]; then
  print_help
  exit 1
fi

case $1 in
  setup)
    setup
    ;;
  use-cluster)
    if [[ $# -ne 2 ]] || ! has_cluster "$2"; then
      print_use_cluster_help
      exit 1
    fi

    use_cluster "$2"
    ;;
  *)
    print_help
    exit 1
    ;;
esac
