local separateMimirRecordingFiles = (import 'recording-rules/lib/mimir/separate-mimir-recording-files.libsonnet').separateMimirRecordingFiles;
local serviceSlosRules = import 'recording-rules/service-slos.libsonnet';
local strings = import 'utils/strings.libsonnet';
local recordingRules = import 'recording-rules/recording-rules.libsonnet';
local thresholds = import 'mwmbr/thresholds.libsonnet';

separateMimirRecordingFiles(
  function(service, selector, extraArgs, _)
    std.foldl(
      function(result, threshold)
        local filename = '%(name)s-health' % { name: threshold.name };
        result {
          [filename]: std.manifestYamlDoc({
            groups: [{
              name: 'Autogenerated %(name)s Health Indicators' % {
                name: strings.capitalizeFirstLetter(threshold.name),
              },
              interval: '1m',
              rules: recordingRules.thresholdHealthRuleSet(threshold, selector),
            }],
          }),
        },
      thresholds.knownOtherThresholds,
      {},
    )
)
