groups:
- name: GitLab Component Errors-per-Second Rates
  interval: 1m
  rules:
  # Postgres/Patroni
  - record: gitlab_component_errors:rate
    labels:
      component: 'service'
      stage: 'main'
    expr: >
      sum by (environment, tier, type) (rate(pg_stat_database_xact_rollback{type="patroni", tier="db"}[1m]))

  # haproxy - treat each backend as a component - Main stage
  - record: gitlab_component_errors:rate
    labels:
      type: 'frontend'
      stage: 'main'
    expr: >
      avg by (environment, tier, component) (
        label_replace(
          sum(rate(haproxy_backend_response_errors_total{backend!~"canary_.*"}[1m])) by (environment, tier, backend),
          "component",
          "backend-$1",
          "backend",
          "(.*)"
        )
      )

  # haproxy - treat each backend as a component - CANARY
  - record: gitlab_component_errors:rate
    labels:
      type: 'frontend'
      stage: 'cny'
    expr: >
      avg by (environment, tier, component) (
        label_replace(
          sum(rate(haproxy_backend_response_errors_total{backend=~"canary_.*"}[1m])) by (environment, tier, backend),
          "component",
          "backend-$1",
          "backend",
          "canary_(.*)"
        )
      )

  # Registry Service
  - record: gitlab_component_errors:rate
    labels:
      type: 'registry'
      component: 'server'
      tier: 'sv'
      stage: 'main'
    expr: >
      sum by (environment) (rate(haproxy_backend_http_responses_total{code="5xx", backend="registry"}[1m]))

  - record: gitlab_component_errors:rate
    labels:
      type: 'registry'
      component: 'server'
      tier: 'sv'
      stage: 'cny'
    expr: >
      sum by (environment) (rate(haproxy_backend_http_responses_total{code="5xx", backend="canary_registry"}[1m]))

  # pages - haproxy service in front of GitLab pages
  - record: gitlab_component_errors:rate
    labels:
      component: 'haproxy_http'
    expr: >
      sum (rate(haproxy_backend_http_responses_total{code="5xx", type="pages"}[1m])) by (environment, type, tier, stage)

  - record: gitlab_component_errors:rate
    labels:
      component: 'haproxy_https'
    expr: >
      sum(rate(haproxy_backend_connection_errors_total{backend="pages_https", type="pages"}[1m])) by (environment, type, tier, stage)

  # web-pages: GitLab Pages backend service
  - record: gitlab_component_errors:rate
    labels:
      component: 'http'
    expr: >
      sum(rate(gitlab_pages_http_requests_total{code=~"5.*"}[1m])) by (environment, tier, type, stage)

  # api/web/sidekiq/git:workhorse
  - record: gitlab_component_errors:rate
    labels:
      component: 'workhorse'
    expr: >
      sum by (environment, tier, type, stage) (rate(gitlab_workhorse_http_requests_total{job=~"gitlab-workhorse-.*", code=~"^5.*"}[1m]))

  # api/web/sidekiq/git:unicorn
  - record: gitlab_component_errors:rate
    labels:
      # type from series: ` api/web/sidekiq/git`
      component: 'unicorn'
    expr: >
      sum by (environment, tier, type, stage) (rate(http_request_duration_seconds_count{job=~"gitlab-(rails|unicorn)", status=~"^5.*"}[1m]))

  # sidekiq: job failure rate
  - record: gitlab_component_errors:rate
    labels:
      component: 'jobs'
    expr: >
      sum by (environment, tier, type, stage) (
        rate(sidekiq_jobs_failed_total{
          type="sidekiq",
          queue!="repository_update_mirror",
          queue!="repository_update_remote_mirror"
        }[1m])
      )

  # gitaly:goserver
  - record: gitlab_component_errors:rate
    labels:
      type: gitaly
      component: 'goserver'
    expr: >
      sum by (environment, tier, type, stage) (rate(grpc_server_handled_total{type="gitaly", grpc_code!~"^(OK|NotFound|Unauthenticated|AlreadyExists|FailedPrecondition)$"}[1m]))

  # ci-runners
  - record: gitlab_component_errors:rate
    labels:
      type: ci-runners
      component: 'polling'
      tier: runners
    # See https://gitlab.com/gitlab-org/gitlab-workhorse/blob/master/internal/builds/register.go for details of each status label
    expr: >
      sum by (environment, stage) (rate(gitlab_workhorse_builds_register_handler_requests{status=~"body\\-parse\\-error|body\\-read\\-error|missing\\-values|watch\\-error"}[1m]))

  # monitoring:thanos
  - record: gitlab_component_errors:rate
    labels:
      component: 'thanos'
    expr: >
      sum(rate(http_requests_total{job="thanos", code=~"^5.*"}[1m])) by (environment, tier, type, stage)

  # monitoring:prometheus
  - record: gitlab_component_errors:rate
    labels:
      component: 'prometheus'
    expr: >
      sum(rate(prometheus_http_requests_total{job="prometheus", code=~"^5.*"}[1m])) by (environment, tier, type, stage)

- name: GitLab Service Errors-per-Second Rates
  interval: 1m
  rules:
  # Aggregate over all components within a service
  - record: gitlab_service_errors:rate
    expr: >
      sum by (environment, tier, type, stage) (gitlab_component_errors:rate >= 0)

- name: GitLab Component Errors-per-Second Rate Stats
  interval: 5m
  rules:
  # Average values for each component, over a week
  - record: gitlab_component_errors:rate:avg_over_time_1w
    expr: >
      avg_over_time(gitlab_component_errors:rate[1w])
  # Stddev for each component, over a week
  - record: gitlab_component_errors:rate:stddev_over_time_1w
    expr: >
      stddev_over_time(gitlab_component_errors:rate[1w])

- name: GitLab Service Errors-per-Second Rate Stats
  interval: 5m
  rules:
  # Average values for each service, over a week
  - record: gitlab_service_errors:rate:avg_over_time_1w
    expr: >
      avg_over_time(gitlab_service_errors:rate[1w])
  # Stddev for each service, over a week
  - record: gitlab_service_errors:rate:stddev_over_time_1w
    expr: >
      stddev_over_time(gitlab_service_errors:rate[1w])
