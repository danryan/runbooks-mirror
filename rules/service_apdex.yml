groups:
- name: GitLab Component Apdex Scores
  interval: 1m
  rules:
  # gitaly:goserver
  # Satisfied -> 0.5 seconds
  # Acceptable -> 1 seconds
  # NOTE: when adjusting this definition, update the
  # per node equivalent definition in `dashboards/gitaly/main.dashboard.jsonnet`
  - record: gitlab_component_apdex:ratio
    labels:
      type: gitaly
      tier: stor
      component: 'goserver'
    expr: >
      (
        sum(rate(grpc_server_handling_seconds_bucket{type="gitaly", tier="stor", grpc_type="unary", le="0.5", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserFFBranch|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier, stage)
        +
        sum(rate(grpc_server_handling_seconds_bucket{type="gitaly", tier="stor", grpc_type="unary", le="1", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserFFBranch|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier, stage)
      )
      /
      2 / (sum(rate(grpc_server_handling_seconds_count{type="gitaly", tier="stor", grpc_type="unary", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserFFBranch|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier, stage))

  - record: gitlab_component_apdex:weight:score
    labels:
      type: gitaly
      tier: stor
      component: 'goserver'
    expr: >
      sum(rate(grpc_server_handling_seconds_count{type="gitaly", tier="stor", grpc_type="unary", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserFFBranch|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier, stage)

  # Sidekiq jobs
  # See https://gitlab.com/gitlab-com/gl-infra/infrastructure/issues/6670 for details
  # We deliberately ignore the `import` queue for now

  # Sidekiq pullmirror Queue
  - record: gitlab_component_apdex:ratio
    labels:
      component: 'pullmirror'
    expr: >
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="60", priority="pullmirror"}[1m])) by (environment, tier, type, stage)
      /
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="pullmirror"}[1m])) by (environment, tier, type, stage)

  - record: gitlab_component_apdex:weight:score
    labels:
      component: 'pullmirror'
    expr: >
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="pullmirror"}[1m])) by (environment, tier, type, stage)

  # Sidekiq besteffort Queue
  - record: gitlab_component_apdex:ratio
    labels:
      component: 'besteffort'
    expr: >
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="60", priority="besteffort", queue!~"project_export|git_garbage_collect|repository_update_remote_mirror"}[1m])) by (environment, tier, type, stage)
      /
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="besteffort", queue!~"project_export|git_garbage_collect|repository_update_remote_mirror"}[1m])) by (environment, tier, type, stage)

  - record: gitlab_component_apdex:weight:score
    labels:
      component: 'besteffort'
    expr: >
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="besteffort", queue!~"project_export|git_garbage_collect|repository_update_remote_mirror"}[1m])) by (environment, tier, type, stage)

  # Sidekiq Pages Queue
  - record: gitlab_component_apdex:ratio
    labels:
      component: 'pages'
    expr: >
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="60", priority="pages"}[1m])) by (environment, tier, type, stage)
      /
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="pages"}[1m])) by (environment, tier, type, stage)

  - record: gitlab_component_apdex:weight:score
    labels:
      component: 'pages'
    expr: >
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="pages"}[1m])) by (environment, tier, type, stage)

  # Sidekiq Realtime Queue
  - record: gitlab_component_apdex:ratio
    labels:
      component: 'realtime'
    expr: >
      (
        sum(rate(sidekiq_jobs_completion_seconds_bucket{le="5", priority="realtime"}[1m])) by (environment, tier, type, stage)
        +
        sum(rate(sidekiq_jobs_completion_seconds_bucket{le="10", priority="realtime"}[1m])) by (environment, tier, type, stage)
      )
      / 2
      /
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="realtime"}[1m])) by (environment, tier, type, stage)

  - record: gitlab_component_apdex:weight:score
    labels:
      component: 'realtime'
    expr: >
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="realtime"}[1m])) by (environment, tier, type, stage)

  # Sidekiq ASAP Queue
  - record: gitlab_component_apdex:ratio
    labels:
      component: 'asap'
    expr: >
      (
        sum(rate(sidekiq_jobs_completion_seconds_bucket{le="5", priority="asap"}[1m])) by (environment, tier, type, stage)
        +
        sum(rate(sidekiq_jobs_completion_seconds_bucket{le="10", priority="asap"}[1m])) by (environment, tier, type, stage)
      )
      / 2
      /
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="asap"}[1m])) by (environment, tier, type, stage)

  - record: gitlab_component_apdex:weight:score
    labels:
      component: 'asap'
    expr: >
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="asap"}[1m])) by (environment, tier, type, stage)

  # Sidekiq Pipeline Queue
  - record: gitlab_component_apdex:ratio
    labels:
      component: 'pipeline'
    expr: >
      (
        sum(rate(sidekiq_jobs_completion_seconds_bucket{le="1", priority="pipeline"}[1m])) by (environment, tier, type, stage)
        +
        sum(rate(sidekiq_jobs_completion_seconds_bucket{le="2.5", priority="pipeline"}[1m])) by (environment, tier, type, stage)
      )
      / 2
      /
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="pipeline"}[1m])) by (environment, tier, type, stage)

  - record: gitlab_component_apdex:weight:score
    labels:
      component: 'pipeline'
    expr: >
      sum(rate(sidekiq_jobs_completion_seconds_bucket{le="+Inf", priority="pipeline"}[1m])) by (environment, tier, type, stage)

  # redis-cache: indirectly measured with rails redis cache operations durations
  # We don't have latency histograms for patroni but for now we will
  # use the rails controller SQL latencies as an indirect proxy.
  # Satisfied -> 0.01 seconds
  # Acceptable -> 0.1 seconds
  - record: gitlab_component_apdex:ratio
    labels:
      type: redis-cache
      tier: db
      component: 'rails_cache'
      stage: main
    expr: >
      (
        sum(job:gitlab_cache_operation_duration_seconds_bucket:rate1m{le="0.01"}) by (environment)
        +
        sum(job:gitlab_cache_operation_duration_seconds_bucket:rate1m{le="0.1"}) by (environment)
      )
      / 2
      /
      sum(job:gitlab_cache_operation_duration_seconds_bucket:rate1m{le="+Inf"}) by (environment) >= 0

  - record: gitlab_component_apdex:weight:score
    labels:
      type: redis-cache
      tier: db
      component: 'rails_cache'
      stage: main
    expr: >
      sum(job:gitlab_cache_operation_duration_seconds_bucket:rate1m{le="+Inf"}) by (environment)

  ######################
  # Aggregation Stage
  ######################

  # Aggregate over all components within a service using a weighted average
  # Why use the avg_over_time[1h] value for the weight? This is because
  # if a component suddenly stops working, its RPS will drop to zero and
  # therefore its weight will also drop to zero, meaning that it won't affect
  # the apdex. Using a 1h average is an attempt at resolving this, although
  # 1hr may not be enough.
  - record: gitlab_service_apdex:ratio
    expr: >
      sum by (environment, tier, type, stage) ((gitlab_component_apdex:ratio >= 0) * (avg_over_time(gitlab_component_apdex:weight:score[1h]) >= 0))
      /
      sum by (environment, tier, type, stage) (avg_over_time(gitlab_component_apdex:weight:score[1h]) >= 0)

- name: GitLab Component Apdex Score Stats
  interval: 5m
  rules:
  # Average values for each component, over a week
  - record: gitlab_component_apdex:ratio:avg_over_time_1w
    expr: >
      avg_over_time(gitlab_component_apdex:ratio[1w])
  # Stddev for each component, over a week
  - record: gitlab_component_apdex:ratio:stddev_over_time_1w
    expr: >
      stddev_over_time(gitlab_component_apdex:ratio[1w])

- name: GitLab Service Apdex Score Stats
  interval: 5m
  rules:
  # Average values for each service, over a week
  - record: gitlab_service_apdex:ratio:avg_over_time_1w
    expr: >
      avg_over_time(gitlab_service_apdex:ratio[1w])
  # Stddev for each service, over a week
  - record: gitlab_service_apdex:ratio:stddev_over_time_1w
    expr: >
      stddev_over_time(gitlab_service_apdex:ratio[1w])
