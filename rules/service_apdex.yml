groups:
- name: GitLab Component Apdex Scores
  interval: 1m
  rules:
  # haproxy:http traffic - NON-CANARY
  - record: gitlab_component_apdex:ratio
    labels:
      type: 'haproxy'
      tier: 'lb'
      stage: 'main'
    expr: >
      avg by (environment, component) (
        label_replace(
          sum(rate(haproxy_http_response_duration_seconds_bucket{backend_name!~"canary_.*", backend_name!="api_rate_limit", le="5"}[1m])) by (environment, backend_name)
          /
          sum(rate(haproxy_http_response_duration_seconds_bucket{backend_name!~"canary_.*", backend_name!="api_rate_limit", le="+Inf"}[1m])) by (environment, backend_name),
          "component",
          "backend-$1",
          "backend_name",
          "(.*)"
        )
      )

  # haproxy:http traffic - CANARY
  - record: gitlab_component_apdex:ratio
    labels:
      type: 'haproxy'
      tier: 'lb'
      stage: 'cny'
    expr: >
      avg by (environment, component) (
        label_replace(
          sum(rate(haproxy_http_response_duration_seconds_bucket{backend_name=~"canary_.*", le="5"}[1m])) by (environment, backend_name)
          /
          sum(rate(haproxy_http_response_duration_seconds_bucket{backend_name=~"canary_.*", le="+Inf"}[1m])) by (environment, backend_name),
          "component",
          "backend-$1",
          "backend_name",
          "canary_(.*)"
        )
      )

  # haproxy:ssh traffic
  - record: gitlab_component_apdex:ratio
    labels:
      type: 'haproxy'
      tier: 'lb'
      stage: 'main'
      component: 'backend-ssh'
    expr: >
      sum(rate(haproxy_ssh_request_duration_seconds_bucket{le="8"}[1m])) by (environment)
      /
      sum(rate(haproxy_ssh_request_duration_seconds_bucket{le="+Inf"}[1m])) by (environment)

    # Note: As yet, there is no canary git+ssh traffic

  # web:workhorse
  # Satisfied -> 1 seconds
  # Acceptable -> 10 seconds
  - record: gitlab_component_apdex:ratio
    labels:
      type: web
      tier: sv
      component: 'workhorse'
    expr: >
      (
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-web", type="web", tier="sv", le="1", code=~"^[23].*"}[1m])) by (environment, type, tier, stage)
      +
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-web", type="web", tier="sv", le="10", code=~"^[23].*"}[1m])) by (environment, type, tier, stage)
      )
      /
      2 / sum(rate(gitlab_workhorse_http_request_duration_seconds_count{job="gitlab-workhorse-web", type="web", tier="sv", code=~"^[235].*"}[1m])) by (environment, type, tier, stage)

  # api:workhorse
  # Satisfied -> 10 seconds
  # Acceptable -> 30 seconds
  - record: gitlab_component_apdex:ratio
    labels:
      type: api
      tier: sv
      component: 'workhorse'
    expr: >
      (
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-api", type="api", tier="sv", le="10", code=~"^[23].*", route!="^/api/v4/jobs/request\\z"}[1m])) by (environment, type, tier, stage)
      +
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-api", type="api", tier="sv", le="30", code=~"^[23].*", route!="^/api/v4/jobs/request\\z"}[1m])) by (environment, type, tier, stage)
      )
      /
      2 / sum(rate(gitlab_workhorse_http_request_duration_seconds_count{job="gitlab-workhorse-api", type="api", tier="sv", code=~"^[235].*", route!="^/api/v4/jobs/request\\z"}[1m])) by (environment, type, tier, stage)

  # git:workhorse
  # Satisfied -> 30 seconds
  # Acceptable -> 60 seconds
  - record: gitlab_component_apdex:ratio
    labels:
      type: git
      tier: sv
      component: 'workhorse'
    expr: >
      (
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-git", type="git", tier="sv", le="30", code=~"^[23].*"}[1m])) by (environment, type, tier, stage)
      +
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-git", type="git", tier="sv", le="60", code=~"^[23].*"}[1m])) by (environment, type, tier, stage)
      )
      /
      2 / sum(rate(gitlab_workhorse_http_request_duration_seconds_count{job="gitlab-workhorse-git", type="git", tier="sv", code=~"^[235].*"}[1m])) by (environment, type, tier, stage)

  # gitaly:goserver
  # Satisfied -> 0.5 seconds
  # Acceptable -> 1 seconds
  - record: gitlab_component_apdex:ratio
    labels:
      type: gitaly
      tier: stor
      component: 'goserver'
    expr: >
      (
        sum(rate(grpc_server_handling_seconds_bucket{type="gitaly", tier="stor", grpc_type="unary", le="0.5", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier, stage)
        +
        sum(rate(grpc_server_handling_seconds_bucket{type="gitaly", tier="stor", grpc_type="unary", le="1", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier, stage)
      )
      /
      2 / (sum(rate(grpc_server_handling_seconds_count{type="gitaly", tier="stor", grpc_type="unary", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier, stage))

  # Sidekiq jobs
  # See https://gitlab.com/gitlab-com/gl-infra/infrastructure/issues/6670 for details
  # We deliberately ignore the `import` queue for now
  - record: gitlab_component_apdex:ratio
    labels:
      component: 'pullmirror'
    expr: >
      (
        sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="25", priority="pullmirror"}[1m])) by (environment, tier, type, stage)
        +
        sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="50", priority="pullmirror"}[1m])) by (environment, tier, type, stage)
      )
      / 2
      /
      sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="+Inf", priority="pullmirror"}[1m])) by (environment, tier, type, stage)

  - record: gitlab_component_apdex:ratio
    labels:
      component: 'besteffort'
    expr: >
      (
        sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="5", priority="besteffort"}[1m])) by (environment, tier, type, stage)
        +
        sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="10", priority="besteffort"}[1m])) by (environment, tier, type, stage)
      )
      / 2
      /
      sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="+Inf", priority="besteffort"}[1m])) by (environment, tier, type, stage)

  # Note: Uses a 5 minute interval as there is < 1 job per minute making the series bitty
  - record: gitlab_component_apdex:ratio
    labels:
      component: 'pages'
    expr: >
      sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="50", priority="pages"}[5m])) by (environment, tier, type, stage)
      /
      sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="+Inf", priority="pages"}[5m])) by (environment, tier, type, stage)

  - record: gitlab_component_apdex:ratio
    labels:
      component: 'realtime'
    expr: >
      (
        sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="5", priority="realtime"}[1m])) by (environment, tier, type, stage)
        +
        sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="10", priority="realtime"}[1m])) by (environment, tier, type, stage)
      )
      / 2
      /
      sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="+Inf", priority="realtime"}[1m])) by (environment, tier, type, stage)

  - record: gitlab_component_apdex:ratio
    labels:
      component: 'asap'
    expr: >
      (
        sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="5", priority="asap"}[1m])) by (environment, tier, type, stage)
        +
        sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="10", priority="asap"}[1m])) by (environment, tier, type, stage)
      )
      / 2
      /
      sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="+Inf", priority="asap"}[1m])) by (environment, tier, type, stage)

  - record: gitlab_component_apdex:ratio
    labels:
      component: 'pipeline'
    expr: >
      (
        sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="1", priority="pipeline"}[1m])) by (environment, tier, type, stage)
        +
        sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="2.5", priority="pipeline"}[1m])) by (environment, tier, type, stage)
      )
      / 2
      /
      sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="+Inf", priority="pipeline"}[1m])) by (environment, tier, type, stage)

- name: GitLab Service Apdex Scores
  interval: 1m
  rules:
  # Aggregate over all components within a service
  # Note that since this aggregates on average, the values are
  # not weighted.
  # TODO: using weighted averages
  - record: gitlab_service_apdex:ratio
    expr: >
      avg by (environment, tier, type, stage) (gitlab_component_apdex:ratio >= 0)

- name: GitLab Component Apdex Score Stats
  interval: 5m
  rules:
  # Average values for each component, over a week
  - record: gitlab_component_apdex:ratio:avg_over_time_1w
    expr: >
      avg_over_time(gitlab_component_apdex:ratio[1w])
  # Stddev for each component, over a week
  - record: gitlab_component_apdex:ratio:stddev_over_time_1w
    expr: >
      stddev_over_time(gitlab_component_apdex:ratio[1w])

- name: GitLab Service Apdex Score Stats
  interval: 5m
  rules:
  # Average values for each service, over a week
  - record: gitlab_service_apdex:ratio:avg_over_time_1w
    expr: >
      avg_over_time(gitlab_service_apdex:ratio[1w])
  # Stddev for each service, over a week
  - record: gitlab_service_apdex:ratio:stddev_over_time_1w
    expr: >
      stddev_over_time(gitlab_service_apdex:ratio[1w])
