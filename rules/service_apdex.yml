groups:
- name: GitLab Component Apdex Scores
  interval: 1m
  rules:
  # haproxy:http traffic
  - record: gitlab_component_apdex:ratio
    labels:
      type: 'haproxy'
      tier: 'lb'
    expr: >
      avg by (environment, tier, component) (
        label_replace(
          sum(rate(haproxy_http_response_duration_seconds_bucket{le="5"}[1m])) by (environment, backend_name)
          /
          sum(rate(haproxy_http_response_duration_seconds_bucket{le="+Inf"}[1m])) by (environment, backend_name) > 0,
          "component",
          "backend-$1",
          "backend_name",
          "(.*)"
        )
      )

  # haproxy:ssh traffic
  - record: gitlab_component_apdex:ratio
    labels:
      type: 'haproxy'
      tier: 'lb'
      stage: 'main'
      component: 'backend-ssh'
    expr: >
      sum(rate(haproxy_ssh_request_duration_seconds_bucket{le="8"}[1m])) by (environment)
      /
      sum(rate(haproxy_ssh_request_duration_seconds_bucket{le="+Inf"}[1m])) by (environment) > 0

    # Note: As yet, there is no canary git+ssh traffic

  - record: gitlab_component_apdex:ratio
    labels:
      type: 'haproxy'
      tier: 'lb'
      stage: 'cny'
      component: 'backend-registry'
    expr: >
      sum(rate(haproxy_http_response_duration_seconds_bucket{server_name=~"^registry-cny-\\d.*", le="5"}[1m])) by (environment)
      /
      sum(rate(haproxy_http_response_duration_seconds_bucket{server_name=~"^registry-cny-\\d.*", le="+Inf"}[1m])) by (environment) > 0

  # web:workhorse
  # Satisfied -> 1 seconds
  # Acceptable -> 10 seconds
  - record: gitlab_component_node_apdex:ratio
    labels:
      type: web
      tier: sv
      component: 'workhorse'
    expr: >
      (
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-web", type="web", tier="sv", le="1", code=~"^[23].*"}[1m])) by (environment, type, tier, fqdn)
      +
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-web", type="web", tier="sv", le="10", code=~"^[23].*"}[1m])) by (environment, type, tier, fqdn)
      )
      /
      2 / sum(rate(gitlab_workhorse_http_request_duration_seconds_count{job="gitlab-workhorse-web", type="web", tier="sv", code=~"^[235].*"}[1m])) by (environment, type, tier, fqdn) > 0

  - record: gitlab_component_apdex:ratio
    labels:
      type: web
      tier: sv
      component: 'workhorse'
    expr: >
      (
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-web", type="web", tier="sv", le="1", code=~"^[23].*"}[1m])) by (environment, type, tier)
      +
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-web", type="web", tier="sv", le="10", code=~"^[23].*"}[1m])) by (environment, type, tier)
      )
      /
      2 / sum(rate(gitlab_workhorse_http_request_duration_seconds_count{job="gitlab-workhorse-web", type="web", tier="sv", code=~"^[235].*"}[1m])) by (environment, type, tier) > 0

  # api:workhorse
  # Satisfied -> 10 seconds
  # Acceptable -> 30 seconds
  - record: gitlab_component_node_apdex:ratio
    labels:
      type: api
      tier: sv
      component: 'workhorse'
    expr: >
      (
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-api", type="api", tier="sv", le="10", code=~"^[23].*", route!="^/api/v4/jobs/request\\z"}[1m])) by (environment, type, tier, fqdn)
      +
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-api", type="api", tier="sv", le="30", code=~"^[23].*", route!="^/api/v4/jobs/request\\z"}[1m])) by (environment, type, tier, fqdn)
      )
      /
      2 / sum(rate(gitlab_workhorse_http_request_duration_seconds_count{job="gitlab-workhorse-api", type="api", tier="sv", code=~"^[235].*", route!="^/api/v4/jobs/request\\z"}[1m])) by (environment, type, tier, fqdn) > 0

  - record: gitlab_component_apdex:ratio
    labels:
      type: api
      tier: sv
      component: 'workhorse'
    expr: >
      (
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-api", type="api", tier="sv", le="10", code=~"^[23].*", route!="^/api/v4/jobs/request\\z"}[1m])) by (environment, type, tier)
      +
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-api", type="api", tier="sv", le="30", code=~"^[23].*", route!="^/api/v4/jobs/request\\z"}[1m])) by (environment, type, tier)
      )
      /
      2 / sum(rate(gitlab_workhorse_http_request_duration_seconds_count{job="gitlab-workhorse-api", type="api", tier="sv", code=~"^[235].*", route!="^/api/v4/jobs/request\\z"}[1m])) by (environment, type, tier) > 0

  # git:workhorse
  # Satisfied -> 30 seconds
  # Acceptable -> 60 seconds
  - record: gitlab_component_node_apdex:ratio
    labels:
      type: git
      tier: sv
      component: 'workhorse'
    expr: >
      (
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-git", type="git", tier="sv", le="30", code=~"^[23].*"}[1m])) by (environment, type, tier, fqdn)
      +
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-git", type="git", tier="sv", le="60", code=~"^[23].*"}[1m])) by (environment, type, tier, fqdn)
      )
      /
      2 / sum(rate(gitlab_workhorse_http_request_duration_seconds_count{job="gitlab-workhorse-git", type="git", tier="sv", code=~"^[235].*"}[1m])) by (environment, type, tier, fqdn) > 0

  - record: gitlab_component_apdex:ratio
    labels:
      type: git
      tier: sv
      component: 'workhorse'
    expr: >
      (
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-git", type="git", tier="sv", le="30", code=~"^[23].*"}[1m])) by (environment, type, tier)
      +
        sum(rate(gitlab_workhorse_http_request_duration_seconds_bucket{job="gitlab-workhorse-git", type="git", tier="sv", le="60", code=~"^[23].*"}[1m])) by (environment, type, tier)
      )
      /
      2 / sum(rate(gitlab_workhorse_http_request_duration_seconds_count{job="gitlab-workhorse-git", type="git", tier="sv", code=~"^[235].*"}[1m])) by (environment, type, tier) > 0

  # gitaly:goserver
  # Satisfied -> 0.5 seconds
  # Acceptable -> 1 seconds
  - record: gitlab_component_node_apdex:ratio
    labels:
      type: gitaly
      tier: stor
      component: 'goserver'
    expr: >
      (
        sum(rate(grpc_server_handling_seconds_bucket{type="gitaly", tier="stor", grpc_type="unary", le="0.5", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier, fqdn)
        +
        sum(rate(grpc_server_handling_seconds_bucket{type="gitaly", tier="stor", grpc_type="unary", le="1", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier, fqdn)
      )
      /
      2 / (sum(rate(grpc_server_handling_seconds_count{type="gitaly", tier="stor", grpc_type="unary", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier, fqdn) > 0)

  - record: gitlab_component_apdex:ratio
    labels:
      type: gitaly
      tier: stor
      component: 'goserver'
    expr: >
      (
        sum(rate(grpc_server_handling_seconds_bucket{type="gitaly", tier="stor", grpc_type="unary", le="0.5", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier)
        +
        sum(rate(grpc_server_handling_seconds_bucket{type="gitaly", tier="stor", grpc_type="unary", le="1", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier)
      )
      /
      2 / (sum(rate(grpc_server_handling_seconds_count{type="gitaly", tier="stor", grpc_type="unary", grpc_method!~"GarbageCollect|Fsck|RepackFull|RepackIncremental|CommitLanguages|CreateRepositoryFromURL|UserRebase|UserSquash|CreateFork|UserUpdateBranch|FindRemoteRepository|UserCherryPick|FetchRemote|UserRevert|FindRemoteRootRef"}[1m])) by (environment, type, tier) > 0)

  # Sidekiq jobs
  # Apdex for selected jobs is calculated as percentage of jobs which run in under 25 seconds.
  # The criteria for selecting the jobs is:
  # 1: should be fairly active
  # 2: should be spread across the queues
  # 3: should have an observable impact for users if the queue is stalled
  # 4: should take less than 25 seconds in normal situations
  - record: gitlab_component_apdex:ratio
    expr: >
      avg by (environment, tier, type, component) (
        label_replace(
          (
            sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="25",
              worker=~"CreateGpgSignatureWorker|WebHookWorker|PostReceive|StageUpdateWorker|ProjectDailyStatisticsWorker|ExpireJobCacheWorker|BuildHooksWorker|ProjectImportScheduleWorker|RepositoryUpdateMirrorWorker|ProcessCommitWorker|PostReceive|ArchiveTraceWorker"}[1m])) by (environment, stage, tier, type, worker) /
            sum(rate(sidekiq_jobs_completion_time_seconds_bucket{le="+Inf"}[1m])) by (environment, stage, tier, type, worker)
          ),
          "component",
          "worker-$1",
          "worker",
          "(.*)"
        )
      )

- name: GitLab Service Apdex Scores
  interval: 1m
  rules:
  # Aggregate over all components within a service
  # Note that since this aggregates on average, the values are
  # not weighted.
  # TODO: using weighted averages
  - record: gitlab_service_apdex:ratio
    expr: >
      avg by (environment, tier, type) (gitlab_component_apdex:ratio)

- name: GitLab Component Node Apdex Score Stats
  interval: 5m
  rules:
  # Average values for each component, over a week
  - record: gitlab_component_node_apdex:ratio:avg_over_time_1w
    expr: >
      avg_over_time(gitlab_component_node_apdex:ratio[1w])
  # Stddev for each component, over a week
  - record: gitlab_component_node_apdex:ratio:stddev_over_time_1w
    expr: >
      stddev_over_time(gitlab_component_node_apdex:ratio[1w])

- name: GitLab Component Apdex Score Stats
  interval: 5m
  rules:
  # Average values for each component, over a week
  - record: gitlab_component_apdex:ratio:avg_over_time_1w
    expr: >
      avg_over_time(gitlab_component_apdex:ratio[1w])
  # Stddev for each component, over a week
  - record: gitlab_component_apdex:ratio:stddev_over_time_1w
    expr: >
      stddev_over_time(gitlab_component_apdex:ratio[1w])

- name: GitLab Service Apdex Score Stats
  interval: 5m
  rules:
  # Average values for each service, over a week
  - record: gitlab_service_apdex:ratio:avg_over_time_1w
    expr: >
      avg_over_time(gitlab_service_apdex:ratio[1w])
  # Stddev for each service, over a week
  - record: gitlab_service_apdex:ratio:stddev_over_time_1w
    expr: >
      stddev_over_time(gitlab_service_apdex:ratio[1w])
