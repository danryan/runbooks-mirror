teams:
- name: create
  url: https://about.gitlab.com/handbook/engineering/dev-backend/create/
  manager_slug: douwe
  slack_channel: g_create
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: distribution
  url: https://about.gitlab.com/handbook/engineering/dev-backend/distribution/
  manager_slug: marin
  slack_channel: distribution
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: geo
  url: https://about.gitlab.com/handbook/engineering/dev-backend/geo/
  manager_slug: geo-mgr
  slack_channel: g_geo
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: gitaly
  url: https://about.gitlab.com/handbook/engineering/dev-backend/gitaly/
  slack_channel: gitaly
  slack_low_severity_alerts_channel: gitaly-alerts
  engagement_policy:
  oncall_schedule:   

- name: gitter
  url: https://about.gitlab.com/handbook/engineering/dev-backend/gitter/
  manager_slug: eng-manager-gitaly
  slack_channel: g_gitaly
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: manage
  url: https://about.gitlab.com/handbook/engineering/dev-backend/manage/
  manager_slug: ruben-d
  slack_channel: g_manage
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: plan
  url: https://about.gitlab.com/handbook/engineering/dev-backend/manage/
  manager_slug: ean-m
  slack_channel: g_plan
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: release
  url: https://about.gitlab.com/handbook/engineering/dev-backend/
  manager_slug: darby-frey
  slack_channel: g_release
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: infrastructure
  url: https://about.gitlab.com/handbook/engineering/infrastructure/
  manager_slug: 
  slack_channel: production
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule: https://gitlab.pagerduty.com/schedules#P22HQSG

# Package team doesn't seem to exist
- name: package
  url: https://about.gitlab.com/handbook/engineering/dev-backend/
  manager_slug: clement
  slack_channel: backend
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: verify
  url: https://about.gitlab.com/handbook/engineering/ops-backend/verify/
  manager_slug: Elliot
  slack_channel: g_verify
  engagement_policy: # Link to doc that talks about engagement
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

tiers:
- name: sv
- name: lb
- name: stor
- name: db
- name: inf 

services:
- name: alertmanager
  tier: inf
  teams:
    - infrastructure
  label: Service:AlertManager
  business:
    requirement: We use Prometheus for our monitoring solution. Alerting with Prometheus is separated into two parts. Alerting rules in Prometheus servers send alerts to an Alertmanager. The Alertmanager then manages those alerts, including silencing, inhibition, aggregation and sending out notifications via, in our case, PagerDuty and Slack.
    customers:
      - infrastructure
    business_value: AlertManager handles deduping, grouping and routing of alerts. It also takes care of silencing and inhibition of alerts. Therefore, it helps us get informed of possible issues in an efficient way so that we can focus on fixing the issues rather than figuring out how to manage and configure the alerts.
    SLA:
      availability:
      response_time:
  technical:
    project: 
      - https://gitlab.com/gitlab-org/build/omnibus-mirror/alertmanager
    criticality: 3
    slx:
    documents:
      design: https://docs.google.com/document/d/1-4jefGkFo71jlaLo4lHz40ZBoCv9ycBBBbjzbXifGyY
      architecture: https://github.com/prometheus/alertmanager/blob/master/doc/arch.svg
      service: 
        - https://github.com/prometheus/alertmanager/blob/master/README.md
      security: https://prometheus.io/docs/operating/security/#alertmanager
    dependencies:
      - service: prometheus
    configurations:
      - config_name: alertmanager.yml
        location: /opt/prometheus/alertmanager/alertmanager.yml
    chef_roles:
      - gprd-infra-alerts
      - gstg-infra-alerts
    scalability:
      note: We run AlertManager in HA, where we have multiple instances in a cluster with gossip protcol. Given that AlertManager does deduping, grouping, silencing, inhibiting...etc it could run a series of checks against incoming alerts and could end up taking up a lot of CPU. Users reported issues where, due to misconfiuration, AlertManager was taking up all of available CPU as well. This indicates that AlertManager is CPU-bound and thus a vertically scalable service.
      bound: cpu
      scalable: vertical
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name:
        permalink:
  infrastructure:
    provider: gcp
    architecture: https://drive.google.com/open?id=1aKSvWfsnrSo_XWm7ZVY3oHLqsd2czZcs
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/alertmanager-notification-failures.md
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/alerts_manual.md
    error_budget:
  observability:
    monitors:
      grafana_folder:
      primary_grafana_dashboard:

- name: api
  tier: sv
  teams:
    - create
    - distribution
    - geo
    - gitaly
    - gitter
    - manage
    - plan
  label: Service:API
  business:
    requirement: |
      API is required to allow developing tools (i.e. bots) that makes use of GitLab.com data,
      otherwise the only way to develop such tools is to parse and/or interact with HTML pages,
      which is far from ideal and unstable as structure can be changed between releases.
    customers:
      - GitLab.com customers
      - Internally used for push/pull operations
      - Internally used for CI/CD interactions
    business_value: |
      Allows GitLab.com customers to interact with GitLab.com programmatically
      through a uniform interface
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://gitlab.com/gitlab-org/gitlab-ce
      - https://gitlab.com/gitlab-org/gitlab-ee
    criticality: 1
    slx:
    documents:
      design:
      architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#service-architecture
      service:
        - https://docs.gitlab.com/ce/api/
        - https://docs.gitlab.com/ee/api/
      security:
    dependencies:
      - service: postgres
      - service: gitaly
      - service: redis
    configurations:
      - config_name: gitlab.rb
        location: /etc/gitlab/gitlab.rb
    chef_roles:
      - gprd-base-fe-api
      - gstg-base-fe-api
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification:
      security_incidents:
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/37946
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/51690
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/53072
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/54334
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/54857
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/54865
    logging:
      - name: Rails
        permalink: https://log.gitlab.net/goto/0238ddb1480bb4bd19c09f0467b6e684
      - name: Workhorse
        permalink: https://log.gitlab.net/goto/eb99f28c17cfcdfd30969a1c85e209dc
      - name: Unicorn
        permalink: https://log.gitlab.net/goto/c8f89b2415788b46978fcd2910b4afec
      - name: nginx
        permalink: https://log.gitlab.net/goto/0d1c84486d6fb28a785f1c21473e5611
      - name: Unstructured Rails
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&advancedFilter=jsonPayload.hostname%3A%22api%22%0Alabels.tag%3D%22unstructured.production%22&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22
      - name: system
        permalink: https://log.gitlab.net/goto/2b9679dab019791136cb8ae1535fb781
  infrastructure:
    provider: gcp
    architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#service-architecture
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      primary_grafana_dashboard: "OktWokpik/workhorse-overview?var-type=api"
      sentry_slug: "gitlab/gitlabcom/?query=program%3A%22rails%22"

- name: blackbox
  tier: inf
  teams:
    - infrastructure
  label: Service:Blackbox
  business:
    requirement: |
      We need a service that's capabale of pinging multiple endpoints over different protocols
      (HTTPS, SSH) and reporting the result of such pings to drive custom alerts when certain
      conditions are met.
    customers:
      - Internally used for monitoring endpoints
    business_value: |
      It probes several endpoints periodically, the results of which is used to
      trigger alerts about other services being down or being slow to respond.
    SLA:
      availability:
      response_time:
  technical:
    project: 
      - https://gitlab.com/gitlab-cookbooks/gitlab-exporters
    criticality: 3
    slx:
    documents:
      design:
      architecture:
      service: 
        - https://github.com/prometheus/blackbox_exporter/blob/master/README.md
      security:
    dependencies:
      - service: prometheus
    configurations:
      - config_name: blackbox_exporter.yml
        location: /opt/prometheus/blackbox_exporter/blackbox_exporter.yml
    chef_roles:
      - gstg-base-blackbox
      - gprd-base-blackbox
    scalability:
      bound: network
      scalable: horizontal
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/b4618f79f80f44cb21a32623a275a0e6
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:

- name: console
  tier: sv
  teams:
    - infrastructure
  label: Service:Console
  business:
    requirement: |
      - Restricted access to the primary DB console
      - Restricted access to a secondary DB console
      - Restricted access to the Geo DB console
      - Restricted access to a Rails console
    customers:
      - GitLab Engineering Team
    business_value: |
      It allows the engineering team to run DB queries and/or Rails commands
      against production and/or staging without giving them full access an
      infrastructure host. It is also used by the SRE team to run maintenance scripts
      that could potentially use a lot of memory and/or CPU, so a production worker
      isn't starved of its resources.
    SLA:
      availability:
      response_time:
  technical:
    project: 
      - https://gitlab.com/gitlab-cookbooks/gitlab_users
    criticality: 4
    slx:
    documents:
      design:
      architecture:
      service:
      security:
    dependencies:
      - service: postgres
      - service: gitaly
      - service: redis
    configurations:
      - config_name: 99-db-console-access
        location: /etc/sudoers.d/99-db-console-access
      - config_name: 99-db-console-primary-access
        location: /etc/sudoers.d/99-db-console-primary-access
      - config_name: 99-db-console-geo-access
        location: /etc/sudoers.d/99-db-console-geo-access
      - config_name: 99-rails-console-access
        location: /etc/sudoers.d/99-rails-console-access
      - config_name: .irbrc
        location: /var/opt/gitlab/.irbrc
    chef_roles:
      - gprd-base-console-node
      - gstg-base-console-node
    scalability:
      bound: memory, cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: history
      - permalink: # Logs are sent to Stackdriver currently are lacking a tag, so we can't come up with a permalink
                   # Progress is being tracked in https://gitlab.com/gitlab-com/gl-infra/infrastructure/issues/6051
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      sentry_slug: "gitlab/gitlabcom/?query=program%3A%22rails%22"

- name: consul
  tier: inf
  teams:
    - infrastructure
  label: Service:Consul
  business:
    requirement: |
      In order to correctly point pgbouncer to a DB master after a failover occurs, we needed
      a solution that can do so in an automated fashion. Among different service
      discovery solutions, we chose Consul.
    customers:
      - Internally used by the Patroni cluster to manage leader election and to share common configurations
      - Internally used by WAL-G to do basebackup on one slave node in the Patroni cluster
      - Internally usable by all other infrastructure nodes within a single environment
    business_value: |
      Consul is feature-rich and easy to use. Beside being used by Patroni, it can be used by the Rails application
      to discover healthy DB replicas. Combined with service discovery, its DNS feature is being considered to be
      used in a dedicated pgbouncer cluster instead of the old approach of using Consul watchers.
    SLA:
      availability:
      response_time:
  technical:
    project: 
      - https://github.com/hashicorp/consul
    criticality: 3
    slx:
    documents:
      design:
      architecture: https://www.consul.io/docs/internals/architecture.html
      service: 
        - https://github.com/hashicorp/consul/blob/master/README.md
      security: https://www.consul.io/docs/internals/security.html
    dependencies:
    configurations:
      - config_name: Consul server
        location: /etc/consul/consul.json
    chef_roles:
      - gstg-infra-consul
      - gprd-infra-consul
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: Consul
        permalink: https://log.gitlab.net/goto/7f15b1f04a0f09fbb18fc62adefe3ed1
      - name: system
        permalink: https://log.gitlab.net/goto/a22fbb60e45a3f6d7860908a5427301c
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      primary_grafana_dashboard: "a988f2tmz/consul"
      sentry_slug:

- name: contributors
  tier: sv
  teams:
    - verify # The service is maintained by Matija Čupić who is part of the Verify team
  label: Service:Contributors
  business:
    requirement: It allows giving credits to GitLab CE contributors.
    customers:
      - Available publicly
    business_value: It is considered a nice interface to show contributors stats.
    SLA:
      availability:
      response_time:
  technical:
    project: 
      - https://gitlab.com/gitlab-com/gitlab-contributors
    criticality: 4
    slx:
    documents:
      design: https://github.com/rails/rails-contributors/blob/master/doc/design.md
      architecture:
      service:
        - https://gitlab.com/gitlab-com/gitlab-contributors/blob/master/README.md
      security:
    dependencies:
    configurations:
      - config_name: NGINX
        location: /etc/nginx/sites-available/contributors
    chef_roles:
      - contributors-gitlab-com
    scalability:
      bound: cpu
      scalable: vertical
    security:
      security_reviewed:
      data_classification: green
      security_incidents:
    logging:
      - name: Rails
        permalink: /home/contributors/app/log/production.log
  infrastructure:
    provider: do
    architecture:
    provisioning: manual
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      primary_grafana_dashboard:
      sentry_slug:

- name: elk
  tier: inf
  teams:
    - infrastructure
  label: Service:ELK
  business:
    requirement: |
      Managing an Elasticsearch cluster in-house turned out to be not an easy undertaking,
      so we're turned to a hosted solution that can handle our volume of logs and provide
      professional support for it.
    customers:
      - Used internally by GitLab teams
    business_value: |
      Allows visibility into the infrastructure, aides in debugging issues and
      incidents handling.
    SLA:
      availability:
      response_time: 4 hours (critical), 1 day (L2), 2 days (L3)
  technical:
    project:
    criticality: 3
    slx:
    documents:
      design:
      architecture:
      service:
      security:
    dependencies:
    configurations:
      - config_name: Elasticsearch config
        location: https://cloud.elastic.co/region/gcp-us-central1/deployment/022d92a4ba7ff6fdacc2a7182948cb0a/edit # Under "User settings overrides"
    chef_roles:
    scalability:
      bound: disk
      scalable: horizontal
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: Elasticsearch
        permalink: https://cloud.elastic.co/region/gcp-us-central1/deployment/022d92a4ba7ff6fdacc2a7182948cb0a/elasticsearch/logs
  infrastructure:
    provider: gcp # managed by Elastic Cloud (elastic.co/cloud)
    architecture:
    provisioning:
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/elk_mapper_parsing_exception.md
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/elastic-cloud.md
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      primary_grafana_dashboard: "USVj3qHmk/logging"
      sentry_slug:

- name: logging
  tier: inf
  teams:
    - infrastructure
  label: Service:Logging
  business:
    requirement: We are required to keep logs, both on legal terms as well as for debugging production issues
    customers:
      - infrastructure
    business_value: Without logging we might not be able to comply with legal requirements and are unable to debug production issues.
    SLA:
      availability:
      response_time:
  technical:
    project:
    criticality: 2
    slx:
    documents:
      design:
      architecture: https://gitlab.com/gitlab-com/runbooks/raw/master/img/logging-infr.png
      service:
        - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/logging.md
      security:
    dependencies:
      - service: elk
    sub_components:
      - fluentd
      - google-pubsub-topics
      - pubsubbeat
      - stackdriver
      - stackdriver-exporter
    configurations:
      - config_name: td-agent/fluentd main configuration
        location: /etc/td-agent/td-agent.conf
      - config_name: td-agent transformation, filter and plugin configuration
        location: /etc/td-agent/conf.d/*
      - config_name: Google PubSub topic configuration
        location: https://console.cloud.google.com/cloudpubsub/topicList?project=gitlab-production
      - config_name: Stackdriver log ingestion
        location: https://console.cloud.google.com/logs/usage?project=gitlab-production
      - config_name: stackdriver exporter config
        location: https://gitlab.com/gitlab-cookbooks/gitlab-exporters/blob/master/attributes/stackdriver_exporter.rb#L8
      - config_name: stackdriver scrape config on Prometheus
        location: /opt/prometheus/prometheus/inventory/stackdriver.yml

    chef_roles:
      - gprd-base
      - gstg-base
      - ops-base
      - dr-base
      - gprd-infra-pubsub
      - gstg-infra-pubsub
      - ops-infra-pubsub
      - dr-infra-pubsub
      - dr-infra-sd-exporter
      - gprd-infra-sd-exporter
      - gstg-infra-sd-exporter
      - ops-infra-sd-exporter
    scalability:
      note: We run fluentd for logs on each host; Google PubSub topics and stackdriver are cloud services; We can only sensibly scale out pubsubbeats.
      bound: cpu
      scalable: vertical
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: Kibana
        permalink: https://log.gitlab.net/app/kibana
      - name: Stackdriver
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production
  infrastructure:
    provider: gcp
    architecture: https://gitlab.com/gitlab-com/runbooks/blob/master/howto/logging.md
    provisioning: terraform
    accesses:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/logging.md
    playbooks:
    error_budget:
  observability:
    monitors:
      grafana_folder:
      primary_grafana_dashboard:

- name: web
  tier: sv
  teams:
    - create
    - distribution
    - geo
    - gitaly
    - gitter
    - manage
    - plan
  label: Service:Web
  business:
    requirement: |
      Web is required as the main destination of GitLab.com, through which users collaborate
      on their code, discuss issues, and many more.
    customers:
      - GitLab.com customers
    business_value: |
      Allows GitLab.com customers to interact with GitLab.com through web-based interface.
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://gitlab.com/gitlab-org/gitlab-ce
      - https://gitlab.com/gitlab-org/gitlab-ee
    criticality: 1
    slx:
    documents:
      design:
      architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#service-architecture
      service:
        - https://docs.gitlab.com/ce/
        - https://docs.gitlab.com/ee/
      security:
    dependencies:
      - service: postgres
      - service: gitaly
      - service: redis
    configurations:
      - config_name: gitlab.rb
        location: /etc/gitlab/gitlab.rb
    chef_roles:
      - gprd-base-fe-web
      - gstg-base-fe-web
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: Rails
        permalink: https://log.gitlab.net/goto/5e1aa9dac377ff2282c70748e9278860
      - name: Workhorse
        permalink: https://log.gitlab.net/goto/cebefc3cf285ce2a94fbfdcadc55f1a4
      - name: Unicorn
        permalink: https://log.gitlab.net/goto/766f73d879983f5ec962d5d6c0ae1cf4
      - name: nginx
        permalink: https://log.gitlab.net/goto/4844ecfa4a7e6f0491685b2cc9224eb0
      - name: Unstructured Rails
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&advancedFilter=jsonPayload.hostname%3A%22web%22%0Alabels.tag%3D%22unstructured.production%22&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22
      - name: system
        permalink: https://log.gitlab.net/goto/c93fb9b8e5df92ed79d993d3a62b5452
  infrastructure:
    provider: gcp
    architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#service-architecture
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      sentry_slug: "gitlab/gitlabcom/?query=program%3A%22rails%22"
      primary_grafana_dashboard: "OktWokpik/workhorse-overview?var-type=web"

- name: fe-lb
  tier: lb
  teams:
    - infrastructure
  label: Service:HAProxy
  business:
    requirement: |
      Load balancers offered by cloud providers has limited configurations and doesn't
      allow for lots of flexible setups, hence we use HAProxy to avoid those shortcomings.
    customers:
      - GitLab.com customers
    business_value: |
      HAProxy is invisible to customers but it provides us high levels of operational flexibility,
      like rate limiting, blocking access based on different criteria, ease of removing backend from
      balancing pools for maintenance, customizable logging, and many more.
    SLA:
      availability:
      response_time:
  technical:
    project: 
      - https://gitlab.com/gitlab-cookbooks/gitlab-haproxy
    criticality: 1
    slx:
    documents:
      design:
      architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#infra-current-archi-diagram
      service: 
        - https://cbonte.github.io/haproxy-dconv/1.7/intro.html
      security:
    dependencies:
      - service: api
      - service: git
      - service: web
    configurations:
      - config_name: haproxy.cfg
        location: /etc/haproxy/haproxy.cfg
    chef_roles:
      - gprd-base-lb-fe
      - gstg-base-lb-fe
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: haproxy
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&organizationId=769164969568&interval=PT1H&resource=gce_instance%2Finstance_id%2F1812745190666049211&scrollTimestamp=2019-01-22T15:27:18.915253748Z&advancedFilter=resource.type%3D%22gce_instance%22%0Alabels.tag%3D%22haproxy%22
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance: https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/haproxy.md
    runbooks: 
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/haproxy.md
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder: N9YSt6Siz
      primary_grafana_dashboard: "ZOOh_aNik/haproxy"

- name: git
  tier: sv
  teams: 
    - create 
    - distribution
    - geo
    - gitaly
    - gitter 
    - manage
    - plan 
  label: Service:Git
  business: 
    requirement: |
      Serves git operation requests over SSH and HTTP. The specific git operations handled are git-upload-pack (pushing), git-receive-pack (pulling), git-upload-archive (creating an archive of a tree), and git-lfs-authenticate (LFS authentication). git-upload-pack is also used in git-ls-remote.
    customers:
      - GitLab.com customers
      - GitLab Employees
    business_value:
      This is the standard way of working with and managing remote repositories.
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://gitlab.com/gitlab-org/gitlab-shell # SSH
      - https://gitlab.com/gitlab-org/gitlab-workhorse # HTTP
    criticality: 3
    documents:
      design:
      architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#infra-current-archi-diagram
      service: 
        - https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#service-architecture
      security:
    dependencies:
      - service: gitaly
      - service: postgres
      - service: redis
    configurations:
      - config_name: gitlab.rb
        location: /etc/gitlab/gitlab.rb
      - config_name: gitlab-shell
        location: /var/opt/gitlab/gitlab-shel/config.yml
      - config_name: gitlab-workhorse
        location: /var/opt/gitlab/gitlab-workhorse/config.toml
    chef_roles:
      - gprd-base-fe-git
      - gstg-base-fe-git
    scalability:
      bound: network
      scalable: horizontal
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: Rails
        permalink: https://log.gitlab.net/goto/b368513b02f183a06d28c2a958b00602
      - name: Workhorse
        permalink: https://log.gitlab.net/goto/3ddd4ee7141ba2ec1a8b3bb0cb1476fe
      - name: Unicorn
        permalink: https://log.gitlab.net/goto/0cf60e9a1c94236eefb23348c39feaeb
      - name: nginx
        permalink: https://log.gitlab.net/goto/8a5fb5820ec7c8daebf719c51fa00ce0
      - name: Unstructured Rails
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&advancedFilter=jsonPayload.hostname%3A%22git%22%0Alabels.tag%3D%22unstructured.production%22&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22
      - name: system
        permalink: https://log.gitlab.net/goto/bd680ccb3c21567e47a821bbf52a7c09
  infrastructure:
    provider: gcp
    architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#service-architecture
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/git.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/git-stuck-processes.md
    error_budget:
  observability:
    monitors:
      sentry_slug: "gitlab/gitlabcom/?query=program%3A%22rails%22"
      primary_grafana_dashboard: "OktWokpik/workhorse-overview?var-type=git"

- name: gitaly
  tier: stor
  teams:
    - gitaly
  label: Service:Gitaly
  business:
    requirement: |
      It is needed to eliminate the latencies of doing git operations
      over NFS, and to avoid bringing GitLab.com down when one of the
      NFS nodes is down.
    customers:
      - Internally used by GitLab workers
    business_value: |
      It considerably faster than using git-over-NFS, allows for better
      visibility over git operations, and could be expanded to support caching
      and HA.
    SLA:
      availability:
      response_time:
  technical:
    project: 
      - https://gitlab.com/gitlab-org/gitaly
    criticality: 2
    slx:
    documents:
      design: https://gitlab.com/gitlab-org/gitaly/blob/master/doc/DESIGN.md
      architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#service-architecture
      service: 
        - https://gitlab.com/gitlab-org/gitaly/blob/master/README.md
      security:
    dependencies:
      - service: gitaly
      - service: fe-lb # through gitlab-shell
      - service: redis # through gitlab-shell
    configurations:
      - config_name: Gitaly config
        location: /var/opt/gitlab/gitaly/config.toml
      - config_name: gitlab-shell config
        location: /var/opt/gitlab/gitlab-shell/config.yml
    chef_roles:
      - gstg-base-stor-gitaly
      - gprd-base-stor-gitaly
    scalability:
      bound: cpu
      scalable: vertical
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: Gitaly
        permalink: https://log.gitlab.net/goto/4f0bd7f08b264e7de970bb0cc9530f9d
      - name: gitlab-shell
        permalink: https://log.gitlab.net/goto/ba97a9597863f0df1c3b894b44eb1db6
      - name: system
        permalink: https://log.gitlab.net/goto/7cfb513706cffc0789ad0842674e108a
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-down.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-pubsub.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-latency.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-high-cpu.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-error-rate.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-rate-limiting.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-unusual-activity.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-version-mismatch.md
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/gitaly-profiling.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/gracefully-restart-gitaly-ruby.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/gitaly-debugging-tool.md
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      sentry_slug: gitlab/gitaly-production
      grafana_folder: SRXyrrSmk
      primary_grafana_dashboard: "000000214/gitaly-fleet-overview"

- name: influxdb
  tier: inf
  teams:
    - infrastructure
  label: Service:Influxdb
  business:
    requirement: |
      Until the Rails application is fully migrated to export Prometheus metrics,
      we still need InfluxDB to consume metrics from the application parts that still
      emit InfluxDB metrics.
    customers:
      - Internally by dashboards.gitlab.net
      - Publicly by dashboards.gitlab.com
    business_value: |
      It receives application metrics that provide useful insights about GitLab.com transactions
      like durations, method calls, etc...
    SLA:
      availability:
      response_time:
  technical:
    project: 
      - https://github.com/influxdata/influxdb
    criticality: 3
    slx:
    documents:
      design:
      architecture:
      service: 
        - https://github.com/influxdata/influxdb/blob/master/README.md
      security: https://docs.influxdata.com/influxdb/v1.7/administration/security/
    dependencies:
    configurations:
      - config_name: InfluxDB
        location: /etc/influxdb/influxdb.conf
    chef_roles:
      - gstg-influxdb
      - gprd-influxdb
    scalability:
      bound: disk
      scalable: vertical
    security:
      security_reviewed:
      data_classification: green
      security_incidents:
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/bf44358a81c549827fd8142a4da59d4a
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/manage-influxdb.md
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      primary_grafana_dashboard:
      sentry_slug:

- name: mailroom
  tier: sv
  teams:
    - create
    - distribution
    - geo
    - gitaly
    - gitter
    - manage
    - plan
  label: Service:Mailroom
  business:
    requirement: It is needed to allow responding to issues/MR through email replies.
    customers:
      - GitLab.com customers
    business_value: It is convenient to users to respond to issues/MRs through email replies.

    SLA:
      availability:
      response_time:
  technical:
    project: 
      - https://github.com/tpitale/mail_room
    criticality: 3
    slx:
    documents:
      design:
      architecture:
      service: 
        - https://github.com/tpitale/mail_room/blob/master/README.md
      security:
    dependencies:
      - service: redis
    configurations:
      - config_name: MailRoom
        location: /opt/gitlab/embedded/service/gitlab-rails/config/mail_room.yml
    chef_roles:
      - gstg-base-be-mailroom
      - gprd-base-be-mailroom
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/0ce3bf67abafcfc0f81f3d6e7a066912
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      primary_grafana_dashboard:
      sentry_slug:

- name: pages
  tier: sv
  teams:
    - release
  label: Service:Pages
  business:
    requirement: |
      It allows publishing static web sites in a few minutes, with the ability to set
      custom domain(s) and TLS certificates.
    customers:
      - GitLab.com customers
      - Internally for sites like docs.gitlab.com and design.gitlab.com
    business_value: |
      It allows hosting static websites on GitLab.com for free, which can be an incentive
      for new users to join and use GitLab.com.
    SLA:
      availability:
      response_time:
  technical:
    project: 
      - https://gitlab.com/gitlab-org/gitlab-pages
    criticality: 3
    slx:
    documents:
      design:
      architecture:
      service: 
        - https://gitlab.com/gitlab-org/gitlab-pages/blob/master/README.md
      security:
    dependencies:
    configurations:
    chef_roles:
      - gstg-base-fe-web-pages
      - gprd-base-fe-web-pages
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification: green
      security_incidents:
    logging:
      - name: Pages
        permalink: https://log.gitlab.net/goto/00a732029c1448a741c8730c04038fd9
      - name: haproxy
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22&advancedFilter=labels.tag%3D%22haproxy%22%0Alabels.%22compute.googleapis.com%2Fresource_name%22%3A%22fe-pages-%22
      - name: system
        permalink: https://log.gitlab.net/goto/3384c89c5a828db866d2fa8ec86cd97f
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitlab-pages.md
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder: v2ZhpeSik
      primary_grafana_dashboard: "_IQB_rSmk/pages"

- name: pgbouncer
  tier: db
  teams: 
    - infrastructure
  label: Service:pgbouncer
  business: 
    requirement:  We use PgBouncer as the connection pooler for PostgreSQL
    customers:  
      - GitLab.com customers
    business_value:   |
      It allows pooling and reusing server connections to reduce the number of database conections.
    SLA:
      availability:    # Availability SLA promised to customers
      response_time:   # Response time for inquiries or issues 
                       # relating this service
  technical: 
    project:
      - https://github.com/pgbouncer/pgbouncer
    criticality:  1
    slx:  
    documents: 
      design:   
      architecture:  https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#database-architecture
      service: 
        - https://pgbouncer.github.io/features.html
      security: 
    dependencies: 
      - service:  postgres
    configurations:    # A service might have one or more configs
      - config_name:  pgbouncer.ini
        location:  /var/opt/gitlab/pgbouncer/pgbouncer.ini
    chef_roles:
      - gprd-base-db-pgbouncer-common
      - gprd-base-db-pgbouncer
      - gstg-base-db-pgbouncer-common
      - gstg-base-db-pgbouncer
    scalability:       
      bound:  cpu
      scalable: vertical
    security: 
      security_reviewed: 
      data_classification: 
      security_incidents:  
    logging:
      - name: pgbouncer
        permalink: https://log.gitlab.net/goto/3fb9391e5ef07b47aac2fce6fda175d9
      - name: system
        permalink: https://log.gitlab.net/goto/ae311f6f133cc1c45b62541977081043
  infrastructure: 
    provider:   gcp
    architecture:   https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#database-architecture
    provisioning:  terraform      
    accesses:
      - account_name:  # User or system account that has access to the service 
                       # components in the infra provider
        access_type:   # Level of access
        reviewed:      # Is it reviewed and approved?
  operations:
    maintenance:       # Link to maintenance procedures document
    runbooks:   
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/pgbouncer.md
    playbooks:  
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/pgbouncer.md

    error_budget:  https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability: 
    monitors: 
      grafana_folder: RNfEDpLmz
      primary_grafana_dashboard: "PwlB97Jmk/pgbouncer-overview"

- name: postgres
  tier: db
  teams: 
    - infrastructure
  label: Service:Postgres
  business: 
    requirement:  We use Postgres as our backend database.
    customers:      
      - GitLab.com customers
    business_value: |
      PostgreSQL is a powerful, open source object-relational database system 
      that uses and extends the SQL language combined with many features 
      that safely store and scale the most complicated data workloads.
      We use Patroni as the high-availability solution, PGBouncer as the pooling solution, and WAL-G as the backup solution.

    SLA:
      availability:    # Availability SLA promised to customers
      response_time:   # Response time for inquiries or issues 
                       # relating this service
  technical: 
    project:
      - https://github.com/postgres/postgres
    criticality:       1
    slx:  
    documents: 
      design: 
      architecture:  https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#database-architecture
      service:
        - https://www.postgresql.org/docs/9.6/index.html
      security: https://www.postgresql.org/support/security/
    dependencies:     
      - service: consul  
    components:
      - patroni
    configurations:   
      - config_name:  postgresql.conf
        location:  /var/opt/gitlab/postgresql/postgresql.conf
      - config_name:  pg_ident.conf
        location:  /var/opt/gitlab/postgresql/pg_ident.conf
      - config_name:  pg_hba.conf
        location:  /var/opt/gitlab/postgresql/pg_hba.conf
      - config_name:  patroni.yml
        location:  /var/opt/gitlab/patroni/patroni.yml
    chef_roles:
      - gstg-base-db-patroni
      - gprd-base-db-patroni
    scalability:       
      bound:  cpu, memory, disk
      scalable: horizontal or vertical. We can horizontally scale by adding more read only replicas to serve read oprations. However, for serving read/write operations we may need to scale vertically.
    security: 
      security_reviewed: 
      data_classification: red
      security_incidents:  
    logging:
      - name: Postgres
        permalink: https://log.gitlab.net/goto/d0f8993486c9007a69d85e3a08f1ea7c
      - name: system
        permalink: https://log.gitlab.net/goto/3669d551a595a3a5cf1e9318b74e6c22
  infrastructure: 
    provider:  gcp
    architecture:  https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#database-architecture
    provisioning:  terraform      
    accesses:
      - account_name:  
        access_type:   
        reviewed: 
  operations:
    maintenance:  
    runbooks:  
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/postgres.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitlab-com-wale-backups.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitlab-com-walg-backups.md
    playbooks: 
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/patroni-management.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/pg-ha.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-disk-space.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-rebuild-trigram-indexes.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-replica.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-switchover.md

    error_budget:  https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability: 
    monitors: 
      grafana_folder: RNfEDpLmz
      primary_grafana_dashboard: "000000144/postgresql-overview"

- name: postgres-dr-archive
  tier: db
  teams:
    - infrastructure
  label: Service:PostgresArchive
  business:
    requirement: |
      It is required to continuously recover from the WAL archive
      and hence test the WAL archive. This is necessary because PITR
      relies on a continuous sequence of WAL that can be applied to a
      snapshot of the database (basebackup). If that sequence is broken
      for whatever reason, PITR can only recover until this point and no
      further. We monitor the replication lag of the archive replica.
      If it falls back too far, there's likely a problem with the WAL archive.
    customers:
      - Internally used by DBREs
    business_value: |
      Having multiple ways to recover a database is necessary in case one way
      failed for any reason. WAL archiving is one of the ways we can restore
      a database, in addition to disk snapshots and, in the near future, ZFS
      snapshots.
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://github.com/postgres/postgres
    criticality: 3
    slx:
    documents:
      design:
      architecture:  https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#database-architecture
      service:
        - https://www.postgresql.org/docs/9.6/index.html
      security: https://www.postgresql.org/support/security/
    dependencies:
    configurations:
      - config_name: postgresql.conf
        location: /var/opt/gitlab/postgresql/postgresql.conf
      - config_name: pg_ident.conf
        location: /var/opt/gitlab/postgresql/pg_ident.conf
      - config_name: pg_hba.conf
        location: /var/opt/gitlab/postgresql/pg_hba.conf
      - config_name: recovery.conf
        location: /var/opt/gitlab/postgresql/data/recovery.conf
    chef_roles:
      - gstg-base-db-postgres-archive
      - gprd-base-db-postgres-archive
    scalability:
      bound: disk
      scalable: vertical
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: postgres
        permalink: https://log.gitlab.net/goto/0b7a4ff726bfd3e4eb4b51da82979efc
      - name: system
        permalink: https://log.gitlab.net/goto/4a5ab78f128dcf1b40ad16b75e521609
  infrastructure:
    provider: gcp
    architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#database-architecture
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/postgres.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitlab-com-wale-backups.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitlab-com-walg-backups.md
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/patroni-management.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/pg-ha.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-disk-space.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-rebuild-trigram-indexes.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-replica.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-switchover.md
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder: RNfEDpLmz
      primary_grafana_dashboard: "000000144/postgresql-overview"

- name: postgres-dr-delayed
  tier: db
  teams:
    - infrastructure
  label: Service:PostgresDelayed
  business:
    requirement: |
      It is required to be able to restore DB records that was deleted
      within the last 8 hours from the production DB. This is done by
      continuously restoring WAL segments that are only 8 hours old.
    customers:
      - Internally used by DBREs
    business_value: |
      It is convenient for us and the customers as sometimes people
      have second thoughts about a project they deleted, so we can
      restore its relevant DB records from DR Delayed as it hasn't
      been deleted there yet.
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://github.com/postgres/postgres
    criticality: 3
    slx:
    documents:
      design:
      architecture:  https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#database-architecture
      service:
        - https://www.postgresql.org/docs/9.6/index.html
      security: https://www.postgresql.org/support/security/
    dependencies:
    configurations:
      - config_name: postgresql.conf
        location: /var/opt/gitlab/postgresql/postgresql.conf
      - config_name: pg_ident.conf
        location: /var/opt/gitlab/postgresql/pg_ident.conf
      - config_name: pg_hba.conf
        location: /var/opt/gitlab/postgresql/pg_hba.conf
      - config_name: recovery.conf
        location: /var/opt/gitlab/postgresql/data/recovery.conf
    chef_roles:
      - gstg-base-db-postgres-delayed
      - gprd-base-db-postgres-delayed
    scalability:
      bound: disk
      scalable: vertical
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/3fea946a232d2288e90e575c912fa3e7
  infrastructure:
    provider: gcp
    architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#database-architecture
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/postgres.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitlab-com-wale-backups.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitlab-com-walg-backups.md
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/patroni-management.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/pg-ha.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-disk-space.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-rebuild-trigram-indexes.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-replica.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/postgresql-switchover.md
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder: RNfEDpLmz
      primary_grafana_dashboard: "000000144/postgresql-overview"

- name: psql-timings
  tier: inf
  teams:
    - infrastructure
  label: Service:PsqlTimings
  business:
    requirement: |
      It is needed to store profiles of GitLab Rails RSpec test suites as executed in our CI pipelines,
      to identify specs with interesting attributes. It is also needed to
      store profiling results from https://gitlab.com/gitlab-com/gitlab-profiler.
    customers:
      - GitLab.com employees
    business_value: |
      Having profiles for RSpec test suites has advantages like finding the slowest specs,
      or the spec which issues the most queries. Profiling GitLab.com URLs can help identify
      a bottle-nick or a code that's written poorly.
    SLA:
      availability:
      response_time:
  technical:
    project:
    criticality: 4
    slx:
    documents:
      design:
      architecture:
      service:
        - https://gitlab.com/gitlab-org/gitlab-ce/blob/master/config/initializers/rspec_profiling.rb
        - https://github.com/foraker/rspec_profiling
        - https://gitlab.com/gitlab-com/gitlab-profiler
      security:
    dependencies:
      - service:
    configurations:
      - config_name: postgresql.conf
        location: /etc/postgresql/9.5/main/postgresql.conf
    chef_roles:
    scalability:
      bound: disk
      scalable: vertical
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: PostgreSQL
        permalink: /var/log/postgresql/postgresql-9.5-main.log
  infrastructure:
    provider: do
    architecture:
    provisioning:
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder:
      primary_grafana_dashboard:

- name: prometheus
  tier: inf
  teams:
    - infrastructure
  label: Service:Prometheus
  business:
    requirement: |
      It is needed to collect, store and view metrics exposed by
      parts of our infrastructure that are not running application
      code (e.g. database, redis, ...).
    customers:
      - Internally for infrastructure monitoring at dashboards.gitlab.net
      - General public for publicly available dashboards at dashboards.gitlab.com
    business_value: |
      It gives visibility into our non-application infrastructure (see requirement above),
      it also powers AlertManager.
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://github.com/prometheus/prometheus
    criticality: 3
    slx:
    documents:
      design:
      architecture: https://github.com/prometheus/prometheus/blob/7632e976c0617f6206565541c6d91c02c6e12ed5/README.md#architecture-overview
      service: 
        - https://github.com/prometheus/prometheus/blob/7632e976c0617f6206565541c6d91c02c6e12ed5/README.md
      security:
    dependencies:
      - service:
    configurations:
      - config_name: prometheus.yml
        location: /opt/prometheus/prometheus/prometheus.yml
      - config_name: Rule definitions
        location: /opt/prometheus/prometheus/rules/*.yml
    chef_roles:
      - gstg-infra-prometheus
      - gprd-infra-prometheus
    scalability:
      bound: disk
      scalable: vertical
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/3a0b51d10d33c9558765e97640acb325
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-checkpointing-slow.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-empty-sd.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-failed-checkpoints.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-failed-compactions.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-failed-wal-truncations.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-failing-rule-evaluations.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-filesd-errors.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-high-memory.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-indexing-backlog.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-invalid-config.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-is-down.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-not-ingesting.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-notifications-backlog.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-out-of-order.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-persist-errors.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-persistence-pressure-high.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-scrape-errors.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-slow-rule-eval.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-slow-scrapes.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-slow-series-maintenance.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-storage-inconsistent.md
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/update-prometheus-and-exporters.md
    error_budget:  https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder: 5dsvpeImz
      primary_grafana_dashboard: "-gJSV0Yiz/prometheus-performance"

- name: prometheus-app
  tier: inf
  teams:
    - infrastructure
  label: Service:PrometheusApp
  business:
    requirement: |
      It is needed to collect, store and view metrics exposed by
      parts of our infrastructure that are running application
      code (e.g. api, web, git, sidekiq, ...).
    customers:
      - Internally for infrastructure monitoring at dashboards.gitlab.net
      - General public for publicly available dashboards at dashboards.gitlab.com
    business_value: |
      It gives visibility into our application infrastructure (see requirement above),
      it also powers AlertManager.
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://github.com/prometheus/prometheus
    criticality: 3
    slx:
    documents:
      design:
      architecture: https://github.com/prometheus/prometheus/blob/7632e976c0617f6206565541c6d91c02c6e12ed5/README.md#architecture-overview
      service: 
        - https://github.com/prometheus/prometheus/blob/7632e976c0617f6206565541c6d91c02c6e12ed5/README.md
      security:
    dependencies:
      - service:
    configurations:
      - config_name: prometheus.yml
        location: /opt/prometheus/prometheus/prometheus.yml
      - config_name: Rule definitions
        location: /opt/prometheus/prometheus/rules/*.yml
    chef_roles:
      - gstg-infra-prometheus-app
      - gprd-infra-prometheus-app
    scalability:
      bound: disk
      scalable: vertical
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/8872908a99847f4c6c03602f0c76bdbc
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-checkpointing-slow.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-empty-sd.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-failed-checkpoints.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-failed-compactions.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-failed-wal-truncations.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-failing-rule-evaluations.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-filesd-errors.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-high-memory.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-indexing-backlog.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-invalid-config.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-is-down.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-not-ingesting.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-notifications-backlog.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-out-of-order.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-persist-errors.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-persistence-pressure-high.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-scrape-errors.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-slow-rule-eval.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-slow-scrapes.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-slow-series-maintenance.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/prometheus-storage-inconsistent.md
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/update-prometheus-and-exporters.md
    error_budget:  https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder: 5dsvpeImz
      primary_grafana_dashboard: "-gJSV0Yiz/prometheus-performance"

- name: redis
  tier: db
  teams: 
    - infrastructure
  label: Service:Redis
  business: 
    requirement: |
      Redis is packaged to provide a place to store session data, temporary cache information and background job queues (as the backend for SideKiq).
    customers:
      - GitLab.com customers
    business_value: |
      Redis brings performance as it is an in-memory data structure store and it provides high availability via Redis Sentinel. Therefore, essentially we have a performant and HA service that couples nicely with SideKiq and lets background jobs to be stored and processed.
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://github.com/antirez/redis/
    criticality: 1
    slx:
    documents:
      design:
      architecture:
      service:
        - https://redis.io/documentation
        - https://docs.gitlab.com/omnibus/settings/redis.html
      security:
    dependencies:
      - service:
    configurations:
      - config_name: redis.conf
        location: /var/opt/gitlab/redis/redis.conf
    chef_roles:
      - gstg-base-db-redis-server-single
      - gprd-base-db-redis-server-single
    scalability:
      bound: memory
      scalable: vertical
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: Redis
        permalink: https://log.gitlab.net/goto/27a6bf4e347ef9da754f06eb0a54aedc
      - name: system
        permalink: https://log.gitlab.net/goto/e107ce00a9adede2e130d0c8ec1a2ac7
  infrastructure:
    provider: gcp
    architecture: https://drive.google.com/open?id=1DOIKubC0edztw3_t7ZW-Lqh24heVlrdQ
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/service-redis.md
    error_budget:
  observability:
    monitors:
      primary_grafana_dashboard: "wccEP9Imk/redis"

- name: redis-cache
  tier: db
  teams: 
    - infrastructure
  label: Service:RedisCache
  business: 
    requirement: |
      Redis-Cache is used to cache things like function calls, return values...etc in our Rails appl for performance and optimization purpose. Instead of using the Rails' built-in caching infrastructure, we use annotation decorations to do caching in Redis-Cache.
    customers:
      - GitLab.com customers
    business_value: |
      Redis-Cache delivers us performance and optimization in our Rails app. 
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://github.com/antirez/redis/
    criticality: 1
    slx:
    documents:
      design:
      architecture:
      service:
        - https://redis.io/documentation
        - https://docs.gitlab.com/omnibus/settings/redis.html
      security:
    dependencies:
      - service:
    configurations:
      - config_name: redis.conf
        location: /var/opt/gitlab/redis/redis.conf
    chef_roles:
      - gstg-base-db-redis-server-cache
      - gprd-base-db-redis-server-cache
    scalability:
      bound: memory
      scalable: vertical
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/1a4342231de57c0ceabc8f5e0e402909
  infrastructure:
    provider: gcp
    architecture: https://drive.google.com/open?id=1H5s5EonMX0Mzz6jahAotMOb349TNO7YK
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/service-redis.md
    error_budget:
  observability:
    monitors:
      primary_grafana_dashboard: "wccEP9Imk/redis"

- name: redis-cache-sentinel
  tier: db
  teams: 
    - infrastructure
  label: Service:RedisCacheSentinel
  business: 
    requirement: |
      Redis Sentinel provides High Availability (HA) to Redis. In addition, Sentinel monitors Redis nodes, initiates automatical failover and service discovery.
    customers:
      - GitLab.com customers
    business_value: |
      Redis is a criticality 1 service for us. Therefore, the business value Sentinel provides is huge in the sense that not only does it ensure we have resilient service but also saves us a lot of work and resources (such as monitoring, automatical failover and discovery).
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://github.com/antirez/redis/
    criticality: 1
    slx:
    documents:
      design:
      architecture:
      service:
        - https://redis.io/topics/sentinel
        - https://docs.gitlab.com/omnibus/settings/redis.html#redis-sentinel
      security:
    dependencies:
      - service:
    configurations:
      - config_name: sentinel.conf
        location: /var/opt/gitlab/sentinel/sentinel.conf
    chef_roles:
      - gstg-base-db-redis-sentinel-cache
      - gprd-base-db-redis-sentinel-cache
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification: yellow
      security_incidents:
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/0b28cb1d20663b4359f8bc05995a22ad
  infrastructure:
    provider: gcp
    architecture: https://drive.google.com/open?id=1xJfH7XhfcRzYhgHIelenAn3AZbco6HN0
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/service-redis.md
    error_budget:
  observability:
    monitors:
      primary_grafana_dashboard: "wccEP9Imk/redis"

- name: registry
  tier: sv
  teams:
    - package
  label: Service:Registry
  business:
    requirement: |
      It is needed to have a Docker Container Registry integrated into GitLab
      so every project can have its own space to store its Docker images.
    customers:
      - GitLab.com customers
    business_value: |
      GitLab is all about having a single, integrated experience and registry is no exception.
      Customers can easily use their images for GitLab CI, create images specific for tags or branches and much more.
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://github.com/docker/distribution
    criticality: 2
    slx:
    documents:
      design:
      architecture:
      service: 
        - https://github.com/docker/distribution/blob/364d2e4a5bed94e9393dd88232ea3be29ca8f27a/README.md
      security:
    dependencies:
      - service: web # For JWT authentication
    configurations:
      - config_name: Registry
        location: /var/opt/gitlab/registry/config.yml
    chef_roles:
      - gstg-base-fe-registry
      - gprd-base-fe-registry
    scalability:
      bound: memory
      scalable: horizontal
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: Registry
        permalink: https://log.gitlab.net/goto/1c2fe46c1db40a7aa7d31875f3fd2ad1
      - name: haproxy
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22&advancedFilter=labels.tag%3D%22haproxy%22%0Alabels.%22compute.googleapis.com%2Fresource_name%22%3A%22fe-registry-%22
      - name: system
        permalink: https://log.gitlab.net/goto/b68e1a4183a652dc8d5e52a1fc2c1aba
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitlab-registry.md
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder: Ymoh2MEmk
      primary_grafana_dashboard: "bd2Kl8Imk/registry-host-stats"

- name: share
  tier: stor
  teams:
    - infrastructure
    - create
    - distribution
    - geo
    - manage
    - plan
  label: Service:Share
  business:
    requirement: |
      It is required to have a storage node that's shared between the workers.
    customers:
      - GitLab.com customers
    business_value: |
      In the absence of a cloud object storage configuration, the node is used for storing different
      classes of files (e.g. uploads, artifacts, LFS objects, job traces, temporary files, ...), making them accessible
      to all workers so they can be served to clients. With object storage configuration present, it can
      store files temporarily until they are picked by a background worker to be uploaded to said object storage.
    SLA:
      availability:
      response_time:
  technical:
    project:
    criticality: 1
    slx:
    documents:
      design:
      architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#storage-architecture
      service:
      security:
    dependencies:
    configurations:
    chef_roles:
      - gstg-base-stor-nfs-server
      - gprd-base-stor-nfs-server
    scalability:
      bound: disk
      scalable: vertical
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/3a1a0019df2f6b555866b6f11eb92172
  infrastructure:
    provider: gcp
    architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#storage-architecture
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder:
      primary_grafana_dashboard: "XrqPY11mk/nfs"

- name: sidekiq
  tier: sv
  teams:
    - create
    - distribution
    - geo
    - gitaly
    - gitter
    - manage
    - plan
  label: Service:Sidekiq
  business:
    requirement: |
      It is required as some actions takes considerable amount of time
      and it can't be done as part of a synchronous HTTP request, so it has to be done
      in the background.
    customers:
      - GitLab.com customers
      - Internally for long-running data migrations
    business_value: |
      It sends emails, processes git push requests, import repositories, and many more.
      # For a list of available background workers, see https://gitlab.com/gitlab-org/gitlab-ee/tree/master/app/workers
      # and https://gitlab.com/gitlab-org/gitlab-ee/tree/master/ee/app/workers
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://gitlab.com/gitlab-org/gitlab-ce
      - https://gitlab.com/gitlab-org/gitlab-ee
    criticality: 3
    slx:
    documents:
      design:
      architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#service-architecture
      service:
        - https://github.com/mperham/sidekiq/blob/master/README.md
      security:
    dependencies:
      - service: postgres
      - service: gitaly
      - service: redis
    configurations:
      - config_name: gitlab.rb
        location: /etc/gitlab/gitlab.rb
    chef_roles:
      - gstg-base-be-sidekiq
      - gprd-base-be-sidekiq
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: Sidekiq
        permalink: https://log.gitlab.net/goto/d7e4791e63d2a2b192514ac821c9f14f
      - name: Rails
        permalink: https://log.gitlab.net/goto/86fbcd537588abef69339a352ef81d72
      - name: Unicorn
        permalink: https://log.gitlab.net/goto/c87a39cf228c45ed8691c855aa583170
      - name: Unstructured
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&advancedFilter=jsonPayload.hostname%3A%22sidekiq%22%0Alabels.tag%3D%22unstructured.production%22&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22
      - name: system
        permalink: https://log.gitlab.net/goto/72d0f3fdfd8db18db9800cc04d8b6f55
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/sidekiq_exception_count.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/sidekiq_stats_no_longer_showing.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/large-sidekiq-queue.md
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder: c7nMugpmz
      primary_grafana_dashboard: "9GOIu9Siz/sidekiq-stats"
      sentry_slug: "gitlab/gitlabcom/?query=program%3A%22sidekiq%22"

- name: runner
  tier: sv
  teams:
    - verify
  label: Service:Runner
  business:
    requirement: |
      It is required to run CI jobs that process ChatOps commands.
    customers:
      - GitLab.com employees
    business_value: |
      ChatOps is convenient for GitLab employees as it allows them to perform actions
      that would otherwise require elevated access, such as getting the EXPLAIN ANALYZE
      of a query, seeing who's currently on-call, etc.
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://gitlab.com/gitlab-org/gitlab-runner
      - https://gitlab.com/gitlab-com/chatops
    criticality: 3
    slx:
    documents:
      design:
      architecture:
      service:
        - https://gitlab.com/gitlab-org/gitlab-runner/blob/master/README.md
      security: https://gitlab.com/gitlab-org/gitlab-runner/blob/master/docs/security/index.md
    dependencies:
    configurations:
      - config_name: Runner
        location: /etc/gitlab-runner/config.toml
    chef_roles:
      - gstg-base-runner
      - gprd-base-runner
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/9b8322ad2ddacec15c7c1691d6c67733
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/runners_manager_is_down.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/ci_runner_manager_errors.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/ci_runner_manager_do_limits.md
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/create-runners-manager-node.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/update-gitlab-runner-on-managers.md
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder: bpcbFeIiz
      primary_grafana_dashboard: "000000159/ci"

- name: license
  tier: sv
  teams:
    - manage
  label: Service:License
  business:
    requirement: |
      GitLab employees need an interface to manage existing licenses and create custom new ones.
    customers:
      - GitLab Employees
    business_value: |
      We can easily look up existing licenses as well as create new ones. Having all of these options in a centralized place helps us save time and provide better and faster support to our customers when needed.
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://gitlab.com/gitlab-com/license-gitlab-com
    criticality: 3
    slx:
    documents:
      design:
      architecture:
      service:
        - https://gitlab.com/gitlab-com/license-gitlab-com/blob/master/README.md
      security:
    dependencies:
    configurations:
      - config_name: database
        location: /home/gitlab-license/license-gitlab-com/config/database.yml
      - config_name: nginx
        location: /etc/nginx/nginx.conf
      - config_name: production
        location: /home/gitlab-license/license-gitlab-com/config/environments/production.rb
      - config_name: unicorn
        location: /home/gitlab-license/license-gitlab-com/config/unicorn/production.rb
    chef_roles:
      - license-gitlab-com
      - license-gitlab-walg
    scalability:
      note: Per unit work is CPU bound. However, given that License is a self-contained app the DB runs locally on the same host. This means scaling horizontally is not an option and we would have to scale it up vertically.
      bound: cpu
      scalable: vertical
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: production.log
        permalink: /home/gitlab-license/license-gitlab-com/log/
  infrastructure:
    provider: aws
    architecture:
    provisioning:
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget:
  observability:
    monitors:
      grafana_folder:
      primary_grafana_dashboard:
      sentry_slug:

- name: version
  tier: sv
  teams:
    - manage
  label: Service:Version
  business:
    requirement: |
      We want to communicate to our users whether they are running a secure version or a vulnerable version. The original announcement link https://about.gitlab.com/2015/05/07/version-check/ talks about how this exactly works.
    customers:
      - GitLab Employees
    business_value: |
        Running a vulnerable version opens our customers to security vulnerabilities. Getting insights into version check in time prompts our customers to consider upgrading their software to a secure version. Therefore, the business value the version check brings is tremendous.
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://gitlab.com/gitlab-com/version-gitlab-com
    criticality: 4
    slx:
    documents:
      design:
      architecture:
      service:
        - https://gitlab.com/gitlab-com/version-gitlab-com/blob/master/README.md
      security:
    dependencies:
    configurations:
      - config_name: database
        location: /home/gitlab-version/version-gitlab-com/config/database.yml
      - config_name: nginx
        location: /etc/nginx/nginx.conf
      - config_name: redis
        location: /etc/redis/redis.conf
      - config_name: sidekiq
        location: /etc/supervisor/conf.d/version-sidekiq.conf
      - config_name: unicorn
        location: /home/gitlab-version/version-gitlab-com/config/unicorn/production.rb
    chef_roles:
      - version-gitlab-com
      - version-gitlab-walg
    scalability:
      note: Per unit work is CPU bound. Therefore, scaling the service horizontally would be the right thing to do. However, Version is a self-contained app and its DB runs locally on the same host. Therefore, horizontal scaling wouldn't work. Our option for now is to scale up the service vertically.
      bound: cpu
      scalable: vertical
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: production.log
        permalink: /var/log/version/
  infrastructure:
    provider: aws
    architecture:
    provisioning:
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance: https://gitlab.com/gitlab-com/version-gitlab-com/blob/master/README.md
    runbooks:
    playbooks:
    error_budget:
  observability:
    monitors:
      grafana_folder:
      primary_grafana_dashboard:
      sentry_slug:

- name: pubsub
  tier: inf
  teams:
    - infrastructure
  label: Service:PubSub
  business:
    requirement: |
      Deliver logs from multiple sources (including Stackdriver) to ELK.
    customers:
      - ELK cluster (logging infrastructure)
    business_value: |
      Google's Pub/Sub is very reliable without the burden of maintenance. Integrations with Pub/Sub are available.
    SLA:
      availability:
      response_time: 4 hours (critical), 1 day (L2), 2 days (L3)
  technical:
    project:
      - https://cloud.google.com/pubsub/docs/overview
      - https://ops.gitlab.net/gitlab-com/gl-infra/terraform-modules/google/pubsubbeat
      - https://gitlab.com/gitlab-cookbooks/gitlab-elk
      - https://gitlab.com/gitlab-com/runbooks/tree/master/rules/pubsub.yml
      - https://gitlab.com/gitlab-com/runbooks/tree/master/rules/gitaly.yml
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/logging.md
    criticality: 3
    slx:
    documents:
      design: |
        Services publish their logs to corresponding PubSub topics using fluentd. There is a separate VM for each topic in each environment. Each VM runs a Pubsubbeat process which is subscribed to a topic and uploads messages it receives to ELK.
      architecture: |
        Pub/Sub is a messaging service available on GCP which is similar to RabbitMQ or Kafka. It can be used for many things such as event-driven programming or managing distributed systems. We use it for forwarding logs to ELK. Different components and systems publish their logs to a Pub/Sub topic using fluentd. Pubsubbeat (Elastic Beat capable of subscribing to Pub/Sub topics) forwards them to ELK. For more information about how Pub/Sub is used for collecting logs see: https://gitlab.com/gitlab-com/runbooks/blob/master/howto/logging.md
      service:
      security:
    dependencies:
      - service:
        type:
    configurations:
      - config_name: pubsubbeat config file
        location: /opt/pubsubbeat/pubsubbeat.yml
      - config_name: Prometheus alert rule - logging visibility diminishing
        location: /opt/prometheus/prometheus/rules/pubsub.yml
      - config_name: Prometheus alert rule - gitaly pubsub log send rate is low
        location: /opt/prometheus/prometheus/rules/gitaly.yml
    chef_roles:
      - dr-infra-pubsub
      - gprd-infra-pubsub
      - gstg-infra-pubsub
      - ops-infra-pubsub
    scalability:
      bound:
      scalable:
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: stackdriver
        permalink: https://console.cloud.google.com/logs
      - name: multiple indexes in Kibana
        permalink: https://log.gitlab.net/app/kibana#/discover?_g=()&_a=(columns:!(_source),index:AWQepqf0ihEw2C1phQJl,interval:auto,query:(match_all:()),sort:!('@timestamp',desc))
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
    servers:
      - server_name:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/logging.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/pubsub-queing.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-pubsub.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/elk_mapper_parsing_exception.md
    playbooks:
    issues:
    error_budget:
    engagement:
      team:
  observability:
    monitors:
      primary_grafana_dashboard: https://dashboards.gitlab.net/d/USVj3qHmk/logging
      sentry_slug:
    alerts:
      - alert_link:

- name: shared-runners
  tier: sv
  teams:
    - infrastructure
  label: Service:CI Runner
  business:
    requirement: |
      Shared runners to service CI jobs for any project on GitLab.com.
    customers:
      - GitLab.com customers
    business_value: |
      Shared runners are used by customers to run CI jobs. We offer every
      account up to 2000 minutes, but more can be purchased by upgrading
      to a higher plan.
    SLA:
      availability:
      response_time: p90 of 30 second job pick up latency
  technical:
    project:
      - https://gitlab.com/gitlab-org/gitlab-runner
    criticality: 2
    slx:
    documents:
      design:
      architecture:
      service:
        - https://gitlab.com/gitlab-org/gitlab-runner/blob/master/README.md
      security: https://gitlab.com/gitlab-org/gitlab-runner/blob/master/docs/security/index.md
    dependencies:
    configurations:
      - config_name: Runner
        location: /etc/gitlab-runner/config.toml
    chef_roles:
      - gitlab-runner-base
      - gitlab-runner-gsrm
      - gitlab-runner-prm
      - gitlab-runner-srm
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: shared runners
        permalink: https://log.gitlab.net/goto/b9aed2474a7ffe194a10d4445a02893a
  infrastructure:
    provider: gcp and do
    architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/ci-architecture.html
    provisioning: manual
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/cicd/runners_manager_is_down.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/cicd/ci_runner_manager_errors.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/cicd/ci_runner_manager_do_limits.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/cicd/ci_graphs.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/cicd/ci_too_many_connections_on_runners_cache_server.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/cicd/ci_constantnumberoflongrunningrepeatedjobs.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/cicd/ci_pending_builds.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/cicd/ci_too_many_archiving_trace_failures.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/cicd/ci_workhorse-queuing.md
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/create-runners-manager-node.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/update-gitlab-runner-on-managers.md
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder: bpcbFeIiz
      primary_grafana_dashboard: "000000159/ci"
    alerts:
      - alert_link: https://alerts.gprd.gitlab.net/#/alerts?silenced=false&inhibited=false&filter=%7Bchannel%3D%22ci-cd%22%7D
