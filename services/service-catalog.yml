teams:
- name: create
  url: https://about.gitlab.com/handbook/engineering/dev-backend/create/
  manager_slug: douwe
  slack_channel: g_create
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: distribution
  url: https://about.gitlab.com/handbook/engineering/dev-backend/distribution/
  manager_slug: marin
  slack_channel: distribution
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: geo
  url: https://about.gitlab.com/handbook/engineering/dev-backend/geo/
  manager_slug: geo-mgr
  slack_channel: g_geo
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: gitaly
  url: https://about.gitlab.com/handbook/engineering/dev-backend/gitaly/
  slack_channel: gitaly
  slack_low_severity_alerts_channel: gitaly-alerts
  engagement_policy:
  oncall_schedule:   

- name: gitter
  url: https://about.gitlab.com/handbook/engineering/dev-backend/gitter/
  manager_slug: eng-manager-gitaly
  slack_channel: g_gitaly
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: manage
  url: https://about.gitlab.com/handbook/engineering/dev-backend/manage/
  manager_slug: ruben-d
  slack_channel: g_manage
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: plan
  url: https://about.gitlab.com/handbook/engineering/dev-backend/manage/
  manager_slug: ean-m
  slack_channel: g_plan
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: release
  url: https://about.gitlab.com/handbook/engineering/dev-backend/
  manager_slug: darby-frey
  slack_channel: g_release
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

- name: infrastructure
  url: https://about.gitlab.com/handbook/engineering/infrastructure/
  manager_slug: 
  slack_channel: production
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule: https://gitlab.pagerduty.com/schedules#P22HQSG

# Package team doesn't seem to exist
- name: package
  url: https://about.gitlab.com/handbook/engineering/dev-backend/
  manager_slug: clement
  slack_channel: backend
  engagement_policy: # Link to doc that talks about engagement 
                     # and escalation policy
  oncall_schedule:   # Link to pagerduty oncall schedule

tiers:
- name: sv
- name: lb
- name: stor
- name: db
- name: inf 

services:
- name: alertmanager
  tier: inf
  teams:
    - infrastructure
  label: Service:AlertManager
  business:
    requirement: We use Prometheus for our monitoring solution. Alerting with Prometheus is separated into two parts. Alerting rules in Prometheus servers send alerts to an Alertmanager. The Alertmanager then manages those alerts, including silencing, inhibition, aggregation and sending out notifications via, in our case, PagerDuty and Slack.
    customers:
      - infrastructure
    business_value: AlertManager handles deduping, grouping and routing of alerts. It also takes care of silencing and inhibition of alerts. Therefore, it helps us get informed of possible issues in an efficient way so that we can focus on fixing the issues rather than figuring out how to manage and configure the alerts.
    SLA:
      availability:
      response_time:
  technical:
    project: https://gitlab.com/gitlab-org/build/omnibus-mirror/alertmanager
    criticality: 3
    slx:
    documents:
      design: https://docs.google.com/document/d/1-4jefGkFo71jlaLo4lHz40ZBoCv9ycBBBbjzbXifGyY
      architecture: https://github.com/prometheus/alertmanager/blob/master/doc/arch.svg
      service: https://github.com/prometheus/alertmanager/blob/master/README.md
      security: https://prometheus.io/docs/operating/security/#alertmanager
    dependencies:
      - service: prometheus
    configurations:
      - config_name: alertmanager.yml
        location: /opt/prometheus/alertmanager/alertmanager.yml
    chef_roles:
      - gprd-infra-alerts
      - gstg-infra-alerts
    scalability:
      note: We run AlertManager in HA, where we have multiple instances in a cluster with gossip protcol. Given that AlertManager does deduping, grouping, silencing, inhibiting...etc it could run a series of checks against incoming alerts and could end up taking up a lot of CPU. Users reported issues where, due to misconfiuration, AlertManager was taking up all of available CPU as well. This indicates that AlertManager is CPU-bound and thus a vertically scalable service.
      bound: cpu
      scalable: vertical
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name:
        permalink:
  infrastructure:
    provider: gcp
    architecture: https://drive.google.com/open?id=1aKSvWfsnrSo_XWm7ZVY3oHLqsd2czZcs
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/alertmanager-notification-failures.md
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/alerts_manual.md
    error_budget:
  observability:
    monitors:
      grafana_folder:
      primary_grafana_dashboard:

- name: api
  tier: sv
  teams:
    - create
    - distribution
    - geo
    - gitaly
    - gitter
    - manage
    - plan
  label: Service:API
  business:
    requirement: |
      API is required to allow developing tools (i.e. bots) that makes use of GitLab.com data,
      otherwise the only way to develop such tools is to parse and/or interact with HTML pages,
      which is far from ideal and unstable as structure can be changed between releases.
    customers:
      - GitLab.com customers
      - Internally used for push/pull operations
      - Internally used for CI/CD interactions
    business_value: |
      Allows GitLab.com customers to interact with GitLab.com programmatically
      through a uniform interface
    SLA:
      availability:
      response_time:
  technical:
    project:
      - https://gitlab.com/gitlab-org/gitlab-ce
      - https://gitlab.com/gitlab-org/gitlab-ee
    criticality: 1
    slx:
    documents:
      design:
      architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#service-architecture
      service:
        - https://docs.gitlab.com/ce/api/
        - https://docs.gitlab.com/ee/api/
      security:
    dependencies:
      - service: postgres
      - service: gitaly
      - service: redis
    configurations:
      - config_name: gitlab.rb
        location: /etc/gitlab/gitlab.rb
    chef_roles:
      - gprd-base-fe-api
      - gstg-base-fe-api
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification:
      security_incidents:
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/37946
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/51690
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/53072
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/54334
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/54857
        - https://gitlab.com/gitlab-org/gitlab-ce/issues/54865
    logging:
      - name: Rails
        permalink: https://log.gitlab.net/goto/0238ddb1480bb4bd19c09f0467b6e684
      - name: Workhorse
        permalink: https://log.gitlab.net/goto/eb99f28c17cfcdfd30969a1c85e209dc
      - name: Unicorn
        permalink: https://log.gitlab.net/goto/c8f89b2415788b46978fcd2910b4afec
      - name: nginx
        permalink: https://log.gitlab.net/goto/0d1c84486d6fb28a785f1c21473e5611
      - name: Unstructured Rails
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&advancedFilter=jsonPayload.hostname%3A%22api%22%0Alabels.tag%3D%22unstructured.production%22&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22
      - name: system
        permalink: https://log.gitlab.net/goto/2b9679dab019791136cb8ae1535fb781
  infrastructure:
    provider: gcp
    architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#service-architecture
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      primary_grafana_dashboard: "OktWokpik/workhorse-overview?var-type=api"
      sentry_slug: "gitlab/gitlabcom/?query=program%3A%22rails%22"

- name: blackbox
  tier: inf
  teams:
    - infrastructure
  label: Service:Blackbox
  business:
    requirement: |
      We need a service that's capabale of pinging multiple endpoints over different protocols
      (HTTPS, SSH) and reporting the result of such pings to drive custom alerts when certain
      conditions are met.
    customers:
      - Internally used for monitoring endpoints
    business_value: |
      It probes several endpoints periodically, the results of which is used to
      trigger alerts about other services being down or being slow to respond.
    SLA:
      availability:
      response_time:
  technical:
    project: https://gitlab.com/gitlab-cookbooks/gitlab-exporters
    criticality: 3
    slx:
    documents:
      design:
      architecture:
      service: https://github.com/prometheus/blackbox_exporter/blob/master/README.md
      security:
    dependencies:
      - service: prometheus
    configurations:
      - config_name: blackbox_exporter.yml
        location: /opt/prometheus/blackbox_exporter/blackbox_exporter.yml
    chef_roles:
      - gstg-base-blackbox
      - gprd-base-blackbox
    scalability:
      bound: network
      scalable: horizontal
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/b4618f79f80f44cb21a32623a275a0e6
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:

- name: console
  tier: sv
  teams:
    - infrastructure
  label: Service:Console
  business:
    requirement:
      - Restricted access to the primary DB console
      - Restricted access to a secondary DB console
      - Restricted access to the Geo DB console
      - Restricted access to a Rails console
    customers:
      - GitLab Engineering Team
    business_value: |
      It allows the engineering team to run DB queries and/or Rails commands
      against production and/or staging without giving them full access an
      infrastructure host. It is also used by the SRE team to run maintenance scripts
      that could potentially use a lot of memory and/or CPU, so a production worker
      isn't starved of its resources.
    SLA:
      availability:
      response_time:
  technical:
    project: https://gitlab.com/gitlab-cookbooks/gitlab_users
    criticality: 4
    slx:
    documents:
      design:
      architecture:
      service:
      security:
    dependencies:
      - service: postgres
      - service: gitaly
      - service: redis
    configurations:
      - config_name: 99-db-console-access
        location: /etc/sudoers.d/99-db-console-access
      - config_name: 99-db-console-primary-access
        location: /etc/sudoers.d/99-db-console-primary-access
      - config_name: 99-db-console-geo-access
        location: /etc/sudoers.d/99-db-console-geo-access
      - config_name: 99-rails-console-access
        location: /etc/sudoers.d/99-rails-console-access
      - config_name: .irbrc
        location: /var/opt/gitlab/.irbrc
    chef_roles:
      - gprd-base-console-node
      - gstg-base-console-node
    scalability:
      bound:
        - memory
        - cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: history
      - permalink: # Logs are sent to Stackdriver currently are lacking a tag, so we can't come up with a permalink
                   # Progress is being tracked in https://gitlab.com/gitlab-com/gl-infra/infrastructure/issues/6051
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      sentry_slug: "gitlab/gitlabcom/?query=program%3A%22rails%22"

- name: web
  tier: sv
  teams: 
    - create 
    - distribution
    - geo
    - gitaly
    - gitter 
    - manage
    - plan 
  label: Service:Web
  business: 
    requirement:       # Business requirement of the service (text or paragraph)
    customers:         # List of customers 
    business_value:    # Text/paragraph containing info on what 
                       # business value it brings
    SLA:
      availability:    # Availability SLA promised to customers
      response_time:   # Response time for inquiries or issues 
                       # relating this service
  technical: 
    project:           # GitLab project link 
    criticality:       3 
                       # If this service goes down, what criticality 
                       # of impact is this? (1, 2, 3...etc)
    slx:               # Link to SLX document (SLOs, SLIs)
    documents: 
      design:          # Link to the design doc
      architecture:    # Link to the architecture doc
      service:         # This is the README.md of the service unless
                       # a separate doc exists
      security:        # Link to security related document, if available,
                       # that talks about how the service ensures security 
                       # (encryption, rotation...etc)
    dependencies: 
      - service:       # Existing service name from the catalog that 
                       # it directly depends on 
    configurations:    # A service might have one or more configs
      - config_name:   # Config file name 
        location:      # Location of the config file 
    chef_roles:        # List of Chef roles for this service
    scalability:       
      bound:           # cpu or memory or network or... 
      scalable:        # horizontal or vertical 
    security: 
      security_reviewed: # If security team reviewed the service (yes or no or n/a)
      data_classification: # What level of data does this service handle?
      security_incidents:  # Link to (past/present) security incidents
    logging:
      - name: Rails
        permalink: https://log.gitlab.net/goto/5e1aa9dac377ff2282c70748e9278860
      - name: Workhorse
        permalink: https://log.gitlab.net/goto/cebefc3cf285ce2a94fbfdcadc55f1a4
      - name: Unicorn
        permalink: https://log.gitlab.net/goto/766f73d879983f5ec962d5d6c0ae1cf4
      - name: nginx
        permalink: https://log.gitlab.net/goto/4844ecfa4a7e6f0491685b2cc9224eb0
      - name: Unstructured Rails
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&advancedFilter=jsonPayload.hostname%3A%22web%22%0Alabels.tag%3D%22unstructured.production%22&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22
      - name: system
        permalink: https://log.gitlab.net/goto/c93fb9b8e5df92ed79d993d3a62b5452
  infrastructure: 
    provider:          # azure, do, aws, gcp
    architecture:      # Link to infra architecture diagram for this service 
    provisioning:      # terraform      
    accesses:
      - account_name:  # User or system account that has access to the service 
                       # components in the infra provider
        access_type:   # Level of access
        reviewed:      # Is it reviewed and approved?
  operations:
    maintenance:       # Link to maintenance procedures document
    runbooks:          # Link to runbooks for this service
    playbooks:         # Link to playbooks for this service
    error_budget:      # Link to error budget document for this service 
  observability: 
    monitors: 
      sentry_slug: "gitlab/gitlabcom/?query=program%3A%22rails%22"
      primary_grafana_dashboard: "OktWokpik/workhorse-overview?var-type=web"

- name: fe-lb
  tier: lb
  teams:
    - infrastructure
  label: Service:HAProxy
  business:
    requirement: |
      Load balancers offered by cloud providers has limited configurations and doesn't
      allow for lots of flexible setups, hence we use HAProxy to avoid those shortcomings.
    customers:
      - GitLab.com customers
    business_value: |
      HAProxy is invisible to customers but it provides us high levels of operational flexibility,
      like rate limiting, blocking access based on different criteria, ease of removing backend from
      balancing pools for maintenance, customizable logging, and many more.
    SLA:
      availability:
      response_time:
  technical:
    project: https://gitlab.com/gitlab-cookbooks/gitlab-haproxy
    criticality: 1
    slx:
    documents:
      design:
      architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#infra-current-archi-diagram
      service: https://cbonte.github.io/haproxy-dconv/1.7/intro.html
      security:
    dependencies:
      - service: api
      - service: git
      - service: web
    configurations:
      - config_name: haproxy.cfg
        location: /etc/haproxy/haproxy.cfg
    chef_roles:
      - gprd-base-lb-fe
      - gstg-base-lb-fe
    scalability:
      bound: cpu
      scalable: horizontal
    security:
      security_reviewed:
      data_classification:
      security_incidents:
    logging:
      - name: haproxy
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&organizationId=769164969568&interval=PT1H&resource=gce_instance%2Finstance_id%2F1812745190666049211&scrollTimestamp=2019-01-22T15:27:18.915253748Z&advancedFilter=resource.type%3D%22gce_instance%22%0Alabels.tag%3D%22haproxy%22
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance: https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/haproxy.md
    runbooks: https://gitlab.com/gitlab-com/runbooks/blob/master/howto/haproxy.md
    playbooks:
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      grafana_folder: N9YSt6Siz
      primary_grafana_dashboard: "ZOOh_aNik/haproxy"

- name: git
  tier: sv
  teams: 
    - create 
    - distribution
    - geo
    - gitaly
    - gitter 
    - manage
    - plan 
  label: Service:Git
  business: 
    requirement:       # Business requirement of the service (text or paragraph)
    customers:         # List of customers 
    business_value:    # Text/paragraph containing info on what 
                       # business value it brings
    SLA:
      availability:    # Availability SLA promised to customers
      response_time:   # Response time for inquiries or issues 
                       # relating this service
  technical: 
    project:           # GitLab project link 
    criticality:       3 
                       # If this service goes down, what criticality 
                       # of impact is this? (1, 2, 3...etc)
    slx:               # Link to SLX document (SLOs, SLIs)
    documents: 
      design:          # Link to the design doc
      architecture:    # Link to the architecture doc
      service:         # This is the README.md of the service unless
                       # a separate doc exists
      security:        # Link to security related document, if available,
                       # that talks about how the service ensures security 
                       # (encryption, rotation...etc)
    dependencies: 
      - service:       # Existing service name from the catalog that 
                       # it directly depends on 
    configurations:    # A service might have one or more configs
      - config_name:   # Config file name 
        location:      # Location of the config file 
    chef_roles:        # List of Chef roles for this service
    scalability:       
      bound:           # cpu or memory or network or... 
      scalable:        # horizontal or vertical 
    security: 
      security_reviewed: # If security team reviewed the service (yes or no or n/a)
      data_classification: # What level of data does this service handle?
      security_incidents:  # Link to (past/present) security incidents
    logging:
      - name: Rails
        permalink: https://log.gitlab.net/goto/b368513b02f183a06d28c2a958b00602
      - name: Workhorse
        permalink: https://log.gitlab.net/goto/3ddd4ee7141ba2ec1a8b3bb0cb1476fe
      - name: Unicorn
        permalink: https://log.gitlab.net/goto/0cf60e9a1c94236eefb23348c39feaeb
      - name: nginx
        permalink: https://log.gitlab.net/goto/8a5fb5820ec7c8daebf719c51fa00ce0
      - name: Unstructured Rails
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&advancedFilter=jsonPayload.hostname%3A%22git%22%0Alabels.tag%3D%22unstructured.production%22&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22
      - name: system
        permalink: https://log.gitlab.net/goto/bd680ccb3c21567e47a821bbf52a7c09
  infrastructure: 
    provider:          # azure, do, aws, gcp
    architecture:      # Link to infra architecture diagram for this service 
    provisioning:      # terraform      
    accesses:
      - account_name:  # User or system account that has access to the service 
                       # components in the infra provider
        access_type:   # Level of access
        reviewed:      # Is it reviewed and approved?
  operations:
    maintenance:       # Link to maintenance procedures document
    runbooks:          # Link to runbooks for this service
    playbooks:         # Link to playbooks for this service
    error_budget:      # Link to error budget document for this service 
  observability: 
    monitors: 
      sentry_slug: "gitlab/gitlabcom/?query=program%3A%22rails%22"
      primary_grafana_dashboard: "OktWokpik/workhorse-overview?var-type=git"

- name: gitaly
  tier: stor
  teams:
    - gitaly
  label: Service:Gitaly
  business:
    requirement: |
      It is needed to eliminate the latencies of doing git operations
      over NFS, and to avoid bringing GitLab.com down when one of the
      NFS nodes is down.
    customers:
      - Internally used by GitLab workers
    business_value: |
      It considerably faster than using git-over-NFS, allows for better
      visibility over git operations, and could be expanded to support caching
      and HA.
    SLA:
      availability:
      response_time:
  technical:
    project: https://gitlab.com/gitlab-org/gitaly
    criticality: 2
    slx:
    documents:
      design: https://gitlab.com/gitlab-org/gitaly/blob/master/doc/DESIGN.md
      architecture: https://about.gitlab.com/handbook/engineering/infrastructure/production-architecture/#service-architecture
      service: https://gitlab.com/gitlab-org/gitaly/blob/master/README.md
      security:
    dependencies:
      - service: gitaly
      - service: fe-lb # through gitlab-shell
      - service: redis # through gitlab-shell
    configurations:
      - config_name: Gitaly config
        location: /var/opt/gitlab/gitaly/config.toml
      - config_name: gitlab-shell config
        location: /var/opt/gitlab/gitlab-shell/config.yml
    chef_roles:
      - gstg-base-stor-gitaly
      - gprd-base-stor-gitaly
    scalability:
      bound: cpu
      scalable: vertical
    security:
      security_reviewed:
      data_classification: red
      security_incidents:
    logging:
      - name: Gitaly
        permalink: https://log.gitlab.net/goto/4f0bd7f08b264e7de970bb0cc9530f9d
      - name: gitlab-shell
        permalink: https://log.gitlab.net/goto/ba97a9597863f0df1c3b894b44eb1db6
      - name: system
        permalink: https://log.gitlab.net/goto/7cfb513706cffc0789ad0842674e108a
  infrastructure:
    provider: gcp
    architecture:
    provisioning: terraform
    accesses:
      - account_name:
        access_type:
        reviewed:
  operations:
    maintenance:
    runbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-down.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-pubsub.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-latency.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-high-cpu.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-error-rate.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-rate-limiting.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-unusual-activity.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/troubleshooting/gitaly-version-mismatch.md
    playbooks:
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/gitaly-profiling.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/gracefully-restart-gitaly-ruby.md
      - https://gitlab.com/gitlab-com/runbooks/blob/master/howto/gitaly-debugging-tool.md
    error_budget: https://docs.google.com/spreadsheets/d/1wkK2n5EAvoVXwQZrVoCDsvkYTb1BftL56EzsFW_IA-w/edit
  observability:
    monitors:
      sentry_slug: gitlab/gitaly-production
      grafana_folder: SRXyrrSmk
      primary_grafana_dashboard: "000000214/gitaly-fleet-overview"

- name: mailroom
  tier: sv
  teams: 
    - create 
    - distribution
    - geo
    - gitaly
    - gitter 
    - manage
    - plan 
  label: Service:Mailroom
  business: 
    requirement:       # Business requirement of the service (text or paragraph)
    customers:         # List of customers 
    business_value:    # Text/paragraph containing info on what 
                       # business value it brings
    SLA:
      availability:    # Availability SLA promised to customers
      response_time:   # Response time for inquiries or issues 
                       # relating this service
  technical: 
    project:           # GitLab project link 
    criticality:       3 
                       # If this service goes down, what criticality 
                       # of impact is this? (1, 2, 3...etc)
    slx:               # Link to SLX document (SLOs, SLIs)
    documents: 
      design:          # Link to the design doc
      architecture:    # Link to the architecture doc
      service:         # This is the README.md of the service unless
                       # a separate doc exists
      security:        # Link to security related document, if available,
                       # that talks about how the service ensures security 
                       # (encryption, rotation...etc)
    dependencies: 
      - service:       # Existing service name from the catalog that 
                       # it directly depends on 
    configurations:    # A service might have one or more configs
      - config_name:   # Config file name 
        location:      # Location of the config file 
    chef_roles:        # List of Chef roles for this service
    scalability:       
      bound:           # cpu or memory or network or... 
      scalable:        # horizontal or vertical 
    security: 
      security_reviewed: # If security team reviewed the service (yes or no or n/a)
      data_classification: # What level of data does this service handle?
      security_incidents:  # Link to (past/present) security incidents
    logging:
      - name: system
        permalink: https://log.gitlab.net/goto/0ce3bf67abafcfc0f81f3d6e7a066912
  infrastructure: 
    provider:          # azure, do, aws, gcp
    architecture:      # Link to infra architecture diagram for this service 
    provisioning:      # terraform      
    accesses:
      - account_name:  # User or system account that has access to the service 
                       # components in the infra provider
        access_type:   # Level of access
        reviewed:      # Is it reviewed and approved?
  operations:
    maintenance:       # Link to maintenance procedures document
    runbooks:          # Link to runbooks for this service
    playbooks:         # Link to playbooks for this service
    error_budget:      # Link to error budget document for this service 
  observability: 
    monitors: 
      primary_grafana_dashboard: 
      sentry_slug: 

- name: pages
  tier: sv
  teams: 
    - release
  label: Service:Pages
  business: 
    requirement:       # Business requirement of the service (text or paragraph)
    customers:         # List of customers 
    business_value:    # Text/paragraph containing info on what 
                       # business value it brings
    SLA:
      availability:    # Availability SLA promised to customers
      response_time:   # Response time for inquiries or issues 
                       # relating this service
  technical: 
    project:           # GitLab project link 
    criticality:       3 
                       # If this service goes down, what criticality 
                       # of impact is this? (1, 2, 3...etc)
    slx:               # Link to SLX document (SLOs, SLIs)
    documents: 
      design:          # Link to the design doc
      architecture:    # Link to the architecture doc
      service:         # This is the README.md of the service unless
                       # a separate doc exists
      security:        # Link to security related document, if available,
                       # that talks about how the service ensures security 
                       # (encryption, rotation...etc)
    dependencies: 
      - service:       # Existing service name from the catalog that 
                       # it directly depends on 
    configurations:    # A service might have one or more configs
      - config_name:   # Config file name 
        location:      # Location of the config file 
    chef_roles:        # List of Chef roles for this service
    scalability:       
      bound:           # cpu or memory or network or... 
      scalable:        # horizontal or vertical 
    security: 
      security_reviewed: # If security team reviewed the service (yes or no or n/a)
      data_classification: # What level of data does this service handle?
      security_incidents:  # Link to (past/present) security incidents
    logging:
      - name: Pages
        permalink: https://log.gitlab.net/goto/00a732029c1448a741c8730c04038fd9
      - name: haproxy
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22&advancedFilter=labels.tag%3D%22haproxy%22%0Alabels.%22compute.googleapis.com%2Fresource_name%22%3A%22fe-pages-%22
      - name: system
        permalink: https://log.gitlab.net/goto/3384c89c5a828db866d2fa8ec86cd97f
  infrastructure: 
    provider:          # azure, do, aws, gcp
    architecture:      # Link to infra architecture diagram for this service 
    provisioning:      # terraform      
    accesses:
      - account_name:  # User or system account that has access to the service 
                       # components in the infra provider
        access_type:   # Level of access
        reviewed:      # Is it reviewed and approved?
  operations:
    maintenance:       # Link to maintenance procedures document
    runbooks:          # Link to runbooks for this service
    playbooks:         # Link to playbooks for this service
    error_budget:      # Link to error budget document for this service 
  observability: 
    monitors: 
      grafana_folder: v2ZhpeSik
      primary_grafana_dashboard: "_IQB_rSmk/pages"
  
- name: pgbouncer
  tier: db
  teams: 
    - infrastructure
  label: Service:pgbouncer
  business: 
    requirement:       # Business requirement of the service (text or paragraph)
    customers:         # List of customers 
    business_value:    # Text/paragraph containing info on what 
                       # business value it brings
    SLA:
      availability:    # Availability SLA promised to customers
      response_time:   # Response time for inquiries or issues 
                       # relating this service
  technical: 
    project:           # GitLab project link 
    criticality:       1
                       # If this service goes down, what criticality 
                       # of impact is this? (1, 2, 3...etc)
    slx:               # Link to SLX document (SLOs, SLIs)
    documents: 
      design:          # Link to the design doc
      architecture:    # Link to the architecture doc
      service:         # This is the README.md of the service unless
                       # a separate doc exists
      security:        # Link to security related document, if available,
                       # that talks about how the service ensures security 
                       # (encryption, rotation...etc)
    dependencies: 
      - service:       # Existing service name from the catalog that 
                       # it directly depends on 
    configurations:    # A service might have one or more configs
      - config_name:   # Config file name 
        location:      # Location of the config file 
    chef_roles:        # List of Chef roles for this service
    scalability:       
      bound:           # cpu or memory or network or... 
      scalable:        # horizontal or vertical 
    security: 
      security_reviewed: # If security team reviewed the service (yes or no or n/a)
      data_classification: # What level of data does this service handle?
      security_incidents:  # Link to (past/present) security incidents
    logging:
      - name: pgbouncer
        permalink: https://log.gitlab.net/goto/00a732029c1448a741c8730c04038fd9
      - name: system
        permalink: https://log.gitlab.net/goto/ae311f6f133cc1c45b62541977081043
  infrastructure: 
    provider:          # azure, do, aws, gcp
    architecture:      # Link to infra architecture diagram for this service 
    provisioning:      # terraform      
    accesses:
      - account_name:  # User or system account that has access to the service 
                       # components in the infra provider
        access_type:   # Level of access
        reviewed:      # Is it reviewed and approved?
  operations:
    maintenance:       # Link to maintenance procedures document
    runbooks:          # Link to runbooks for this service
    playbooks:         # Link to playbooks for this service
    error_budget:      # Link to error budget document for this service 
  observability: 
    monitors: 
      grafana_folder: jYXDze5mk
      primary_grafana_dashboard: "PwlB95Jmk/pgbouncer-overview"

- name: postgres
  tier: db
  teams: 
    - infrastructure
  label: Service:Postgres
  business: 
    requirement:       # Business requirement of the service (text or paragraph)
    customers:         # List of customers 
    business_value:    # Text/paragraph containing info on what 
                       # business value it brings
    SLA:
      availability:    # Availability SLA promised to customers
      response_time:   # Response time for inquiries or issues 
                       # relating this service
  technical: 
    project:           # GitLab project link 
    criticality:       1
                       # If this service goes down, what criticality 
                       # of impact is this? (1, 2, 3...etc)
    slx:               # Link to SLX document (SLOs, SLIs)
    documents: 
      design:          # Link to the design doc
      architecture:    # Link to the architecture doc
      service:         # This is the README.md of the service unless
                       # a separate doc exists
      security:        # Link to security related document, if available,
                       # that talks about how the service ensures security 
                       # (encryption, rotation...etc)
    dependencies: 
      - service:       # Existing service name from the catalog that 
                       # it directly depends on 
    configurations:    # A service might have one or more configs
      - config_name:   # Config file name 
        location:      # Location of the config file 
    chef_roles:        # List of Chef roles for this service
    scalability:       
      bound:           # cpu or memory or network or... 
      scalable:        # horizontal or vertical 
    security: 
      security_reviewed: # If security team reviewed the service (yes or no or n/a)
      data_classification: # What level of data does this service handle?
      security_incidents:  # Link to (past/present) security incidents
    logging:
      - name: Postgres
        permalink: https://log.gitlab.net/goto/d0f8993486c9007a69d85e3a08f1ea7c
      - name: system
        permalink: https://log.gitlab.net/goto/3669d551a595a3a5cf1e9318b74e6c22
  infrastructure: 
    provider:          # azure, do, aws, gcp
    architecture:      # Link to infra architecture diagram for this service 
    provisioning:      # terraform      
    accesses:
      - account_name:  # User or system account that has access to the service 
                       # components in the infra provider
        access_type:   # Level of access
        reviewed:      # Is it reviewed and approved?
  operations:
    maintenance:       # Link to maintenance procedures document
    runbooks:          # Link to runbooks for this service
    playbooks:         # Link to playbooks for this service
    error_budget:      # Link to error budget document for this service 
  observability: 
    monitors: 
      grafana_folder: jYXDze5mk
      primary_grafana_dashboard: "000000142/postgresql-overview"

- name: redis
  tier: db
  teams: 
    - infrastructure
  label: Service:Redis
  business: 
    requirement:       # Business requirement of the service (text or paragraph)
    customers:         # List of customers 
    business_value:    # Text/paragraph containing info on what 
                       # business value it brings
    SLA:
      availability:    # Availability SLA promised to customers
      response_time:   # Response time for inquiries or issues 
                       # relating this service
  technical: 
    project:           # GitLab project link 
    criticality:       1
                       # If this service goes down, what criticality 
                       # of impact is this? (1, 2, 3...etc)
    slx:               # Link to SLX document (SLOs, SLIs)
    documents: 
      design:          # Link to the design doc
      architecture:    # Link to the architecture doc
      service:         # This is the README.md of the service unless
                       # a separate doc exists
      security:        # Link to security related document, if available,
                       # that talks about how the service ensures security 
                       # (encryption, rotation...etc)
    dependencies: 
      - service:       # Existing service name from the catalog that 
                       # it directly depends on 
    configurations:    # A service might have one or more configs
      - config_name:   # Config file name 
        location:      # Location of the config file 
    chef_roles:        # List of Chef roles for this service
    scalability:       
      bound:           # cpu or memory or network or... 
      scalable:        # horizontal or vertical 
    security: 
      security_reviewed: # If security team reviewed the service (yes or no or n/a)
      data_classification: # What level of data does this service handle?
      security_incidents:  # Link to (past/present) security incidents
    logging:
      - name: Redis
        permalink: https://log.gitlab.net/goto/27a6bf4e347ef9da754f06eb0a54aedc
      - name: system
        permalink: https://log.gitlab.net/goto/e107ce00a9adede2e130d0c8ec1a2ac7
  infrastructure: 
    provider:          # azure, do, aws, gcp
    architecture:      # Link to infra architecture diagram for this service 
    provisioning:      # terraform      
    accesses:
      - account_name:  # User or system account that has access to the service 
                       # components in the infra provider
        access_type:   # Level of access
        reviewed:      # Is it reviewed and approved?
  operations:
    maintenance:       # Link to maintenance procedures document
    runbooks:          # Link to runbooks for this service
    playbooks:         # Link to playbooks for this service
    error_budget:      # Link to error budget document for this service 
  observability: 
    monitors: 
      grafana_folder: D5R0peIik
      primary_grafana_dashboard: "wccEP9Imk/redis"
                       
- name: registry
  tier: sv
  teams: 
    - package
  label: Service:Registry
  business: 
    requirement:       # Business requirement of the service (text or paragraph)
    customers:         # List of customers 
    business_value:    # Text/paragraph containing info on what 
                       # business value it brings
    SLA:
      availability:    # Availability SLA promised to customers
      response_time:   # Response time for inquiries or issues 
                       # relating this service
  technical: 
    project:           # GitLab project link 
    criticality:       3 
                       # If this service goes down, what criticality 
                       # of impact is this? (1, 2, 3...etc)
    slx:               # Link to SLX document (SLOs, SLIs)
    documents: 
      design:          # Link to the design doc
      architecture:    # Link to the architecture doc
      service:         # This is the README.md of the service unless
                       # a separate doc exists
      security:        # Link to security related document, if available,
                       # that talks about how the service ensures security 
                       # (encryption, rotation...etc)
    dependencies: 
      - service:       # Existing service name from the catalog that 
                       # it directly depends on 
    configurations:    # A service might have one or more configs
      - config_name:   # Config file name 
        location:      # Location of the config file 
    chef_roles:        # List of Chef roles for this service
    scalability:       
      bound:           # cpu or memory or network or... 
      scalable:        # horizontal or vertical 
    security: 
      security_reviewed: # If security team reviewed the service (yes or no or n/a)
      data_classification: # What level of data does this service handle?
      security_incidents:  # Link to (past/present) security incidents
    logging:
      - name: Registry
        permalink: https://log.gitlab.net/goto/1c2fe46c1db40a7aa7d31875f3fd2ad1
      - name: haproxy
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22&advancedFilter=labels.tag%3D%22haproxy%22%0Alabels.%22compute.googleapis.com%2Fresource_name%22%3A%22fe-registry-%22
      - name: system
        permalink: https://log.gitlab.net/goto/b68e1a4183a652dc8d5e52a1fc2c1aba
  infrastructure: 
    provider:          # azure, do, aws, gcp
    architecture:      # Link to infra architecture diagram for this service 
    provisioning:      # terraform      
    accesses:
      - account_name:  # User or system account that has access to the service 
                       # components in the infra provider
        access_type:   # Level of access
        reviewed:      # Is it reviewed and approved?
  operations:
    maintenance:       # Link to maintenance procedures document
    runbooks:          # Link to runbooks for this service
    playbooks:         # Link to playbooks for this service
    error_budget:      # Link to error budget document for this service 
  observability: 
    monitors: 
      primary_grafana_dashboard: 
      sentry_slug: 

- name: sidekiq
  tier: sv
  teams: 
    - create 
    - distribution
    - geo
    - gitaly
    - gitter 
    - manage
    - plan
  label: Service:Sidekiq
  business: 
    requirement:       # Business requirement of the service (text or paragraph)
    customers:         # List of customers 
    business_value:    # Text/paragraph containing info on what 
                       # business value it brings
    SLA:
      availability:    # Availability SLA promised to customers
      response_time:   # Response time for inquiries or issues 
                       # relating this service
  technical: 
    project:           # GitLab project link 
    criticality:       3 
                       # If this service goes down, what criticality 
                       # of impact is this? (1, 2, 3...etc)
    slx:               # Link to SLX document (SLOs, SLIs)
    documents: 
      design:          # Link to the design doc
      architecture:    # Link to the architecture doc
      service:         # This is the README.md of the service unless
                       # a separate doc exists
      security:        # Link to security related document, if available,
                       # that talks about how the service ensures security 
                       # (encryption, rotation...etc)
    dependencies: 
      - service:       # Existing service name from the catalog that 
                       # it directly depends on 
    configurations:    # A service might have one or more configs
      - config_name:   # Config file name 
        location:      # Location of the config file 
    chef_roles:        # List of Chef roles for this service
    scalability:       
      bound:           # cpu or memory or network or... 
      scalable:        # horizontal or vertical 
    security: 
      security_reviewed: # If security team reviewed the service (yes or no or n/a)
      data_classification: # What level of data does this service handle?
      security_incidents:  # Link to (past/present) security incidents
    logging:
      - name: Sidekiq
        permalink: https://log.gitlab.net/goto/d7e4791e63d2a2b192514ac821c9f14f
      - name: Rails
        permalink: https://log.gitlab.net/goto/86fbcd537588abef69339a352ef81d72
      - name: Unicorn
        permalink: https://log.gitlab.net/goto/c87a39cf228c45ed8691c855aa583170
      - name: Unstructured
        permalink: https://console.cloud.google.com/logs/viewer?project=gitlab-production&interval=PT1H&resource=gce_instance&advancedFilter=jsonPayload.hostname%3A%22sidekiq%22%0Alabels.tag%3D%22unstructured.production%22&customFacets=labels.%22compute.googleapis.com%2Fresource_name%22
      - name: system
        permalink: https://log.gitlab.net/goto/72d0f3fdfd8db18db9800cc04d8b6f55
  infrastructure: 
    provider:          # azure, do, aws, gcp
    architecture:      # Link to infra architecture diagram for this service 
    provisioning:      # terraform      
    accesses:
      - account_name:  # User or system account that has access to the service 
                       # components in the infra provider
        access_type:   # Level of access
        reviewed:      # Is it reviewed and approved?
  operations:
    maintenance:       # Link to maintenance procedures document
    runbooks:          # Link to runbooks for this service
    playbooks:         # Link to playbooks for this service
    error_budget:      # Link to error budget document for this service 
  observability: 
    monitors: 
      grafana_folder: c7nMugpmz
      primary_grafana_dashboard: "9GOIu9Siz/sidekiq-stats"
      sentry_slug: "gitlab/gitlabcom/?query=program%3A%22sidekiq%22"
