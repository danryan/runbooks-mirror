local services = (import 'gitlab-metrics-config.libsonnet').monitoredServices;
local thresholds = import 'mwmbr/thresholds.libsonnet';
local recordingRules = import 'recording-rules/recording-rules.libsonnet';
local strings = import 'utils/strings.libsonnet';
local separateGlobalRecordingFiles = (import 'recording-rules/lib/thanos/separate-global-recording-files.libsonnet').separateGlobalRecordingFiles;

local outputPromYaml(groups) =
  std.manifestYamlDoc({
    groups: groups,
  });

// Select all services with `autogenerateRecordingRules` (default on)
local selectedServices = std.filter(function(service) service.autogenerateRecordingRules, services);

local yamls = {
  // The SLOs, and component mappings are the same across environments. So they
  // are not separated per file
  'service-slos.yml':
    // The service SLO rules map SLOs to static recording rules,
    // for use in alerting, dashboards, etc
    local serviceSLOs = recordingRules.serviceSLORuleSetGenerator();

    // Component mappings are static recording rules which help
    // determine whether a component is being monitored. This helps
    // prevent spurious alerts when a component is decommissioned.
    local serviceMapping = recordingRules.serviceMappingRuleSetGenerator();
    local componentMappingRuleSetGenerator = recordingRules.componentMappingRuleSetGenerator();

    outputPromYaml([{
      name: 'Autogenerated Service SLOs',
      interval: '5m',
      partial_response_strategy: 'warn',
      rules:
        std.flatMap(
          function(serviceDefinition)
            serviceSLOs.generateRecordingRulesForService(serviceDefinition),
          selectedServices
        )
        +
        std.flatMap(
          function(serviceDefinition)
            serviceMapping.generateRecordingRulesForService(serviceDefinition),
          selectedServices
        )
        +
        std.flatMap(
          function(serviceDefinition)
            componentMappingRuleSetGenerator.generateRecordingRulesForService(serviceDefinition),
          // We can safely exclude dangerouslyThanosEvaluated services
          // from the component mappings, since these are included in the
          // autogenerated-key-metrics-<service>.yml file
          std.filter(function(s) !s.dangerouslyThanosEvaluated, selectedServices)
        ),
    }]),
};

separateGlobalRecordingFiles(
  function(selector)
    std.foldl(
      function(result, threshold)
        local filename = '%(name)s-health' % { name: threshold.name };
        local content = outputPromYaml([{
          name: 'Autogenerated %(name)s Health Indicators' % {
            name: strings.capitalizeFirstLetter(threshold.name),
          },
          interval: '1m',
          partial_response_strategy: 'warn',
          rules: recordingRules.thresholdHealthRuleSet(threshold, selector),
        }]);
        result { [filename]: content },
      thresholds.knownOtherThresholds,
      {},
    )
) + yamls
