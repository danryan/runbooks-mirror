#!/usr/bin/env bash

set -uo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

cd "${SCRIPT_DIR}" || exit

source "grafana-tools.lib.sh"

if [[ -e .env.sh ]]; then
  source ".env.sh"
fi

if ! [ -d generated ]; then
  echo "No dashboards, generating..."
  # we dont source the file as it would mess up `dry_run` flag
  bash generate-dashboards.sh
fi

IFS=$'\n\t'
TEMPFILE="tempfile"

FILE="${SCRIPT_DIR}/autogenerated-service-health-dashboards.json"

usage() {
  cat <<-EOF
  Usage [Dh]

  DESCRIPTION
    This script checks the existence of any dashboards defined in
    "dashboards/**/*.dashboard.jsonnet" files and collates the result
    in a JSON file

    GRAFANA_API_TOKEN must be set in the environment

    Useful for testing.

  FLAGS
    -D  run in Dry-run
    -h  help

EOF
}

while getopts ":Dh" o; do
  case "${o}" in
    D)
      dry_run="true"
      ;;
    h)
      usage
      exit 0
      ;;
    *) ;;

  esac
done

shift $((OPTIND - 1))

dry_run=${dry_run:-}

if [[ -z $dry_run && -z ${GRAFANA_API_TOKEN:-} ]]; then
  echo "You must set GRAFANA_API_TOKEN to use this script, or run in dry run mode"
  usage
  exit 1
fi

if ! command -v parallel &> /dev/null
then
    echo "You must install GNU parallel to use this script"
    exit 1
fi

prepare

trap 'rm -rf "${TEMPFILE}"' EXIT

# some $FILE needs to exist to avoid jsonnet error in libsonnet/service-maturity/levels.libsonnet
if [ ! -f "$FILE" ]; then
  echo "{}" >"$FILE"
fi

find -P generated -name '*.json' | sed 's/generated\///' | parallel -k -j20 ./generate-service-health-dashboards-metadata-json-single.sh > $TEMPFILE

if [[ -n $dry_run ]]; then
  jq -R -n '[inputs|split(",")]| group_by(.[0]) | map({(.[0][0]): [.[][1]]}) | add | .[]|=sort' $TEMPFILE
else
  jq -R -n '[inputs|split(",")]| group_by(.[0]) | map({(.[0][0]): [.[][1]]}) | add | .[]|=sort' $TEMPFILE >"$FILE"
fi
