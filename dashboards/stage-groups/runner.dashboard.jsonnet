// This file is autogenerated using scripts/update_stage_groups_dashboards.rb
// Please feel free to customize this file.
local stageGroupDashboards = import './stage-group-dashboards.libsonnet';
local grafana = import 'github.com/grafana/grafonnet-lib/grafonnet/grafana.libsonnet';
local template = grafana.template;
local row = grafana.row;
local layout = import 'grafana/layout.libsonnet';
local basic = import 'grafana/basic.libsonnet';
local promQuery = import 'grafana/prom_query.libsonnet';
local seriesOverrides = import 'grafana/series_overrides.libsonnet';
local aggregations = import 'promql/aggregations.libsonnet';

local runnersService = (import 'metrics-catalog.libsonnet').getService('ci-runners');
local keyMetrics = import 'key_metrics.libsonnet';

local filters = [
  template.new(
    'shard',
    '$PROMETHEUS_DS',
    query=|||
      label_values(gitlab_runner_version_info{job=~".*",job!~"omnibus-runners|gprd-runner",shard!="default"}, shard)
    |||,
    current=null,
    refresh='load',
    sort=true,
    multi=true,
    includeAll=true,
  ),

  template.new(
    'runner_manager',
    '$PROMETHEUS_DS',
    query=|||
      query_result(label_replace(gitlab_runner_version_info{shard=~"$shard"}, "fqdn", "$1.*", "instance", "(.*):[0-9]+$"))
    |||,
    regex='/fqdn="([^"]+)"/',
    current=null,
    refresh='load',
    sort=1,
    multi=true,
    includeAll=true,
  ),

];

local selectorHash = {
  type: runnersService.type,
  tier: runnersService.tier,
  stage: '$stage',
  environment: '$environment',
};

local jobSaturationMetrics = {
  concurrent: 'gitlab_runner_concurrent',
  limit: 'gitlab_runner_limit',
};

local aggregatorLegendFormat(aggregator) = '{{ %s }}' % aggregator;

local runningJobSaturation(aggregators, saturationType) =
  local serializedAggregation = aggregations.serialize(aggregators);
  basic.timeseries(
    title='Job saturation %(type)s by %(aggregator)s' % { aggregator: serializedAggregation, type: saturationType },
    legendFormat='%(aggregators)s' % { aggregators: std.join(' - ', std.map(aggregatorLegendFormat, aggregators)) },
    format='percentunit',
    query=|||
      sum by (%(aggregator)s) (
        gitlab_runner_jobs{environment="$environment", stage="$stage", shard=~"${shard}", instance=~"${runner_manager:pipe}", job="runners-manager"}
      ) / sum by (%(aggregator)s) (
        %(maxJobsMetric)s{environment="$environment", stage="$stage", shard=~"${shard}"}
      )
    ||| % {
      aggregator: serializedAggregation,
      maxJobsMetric: jobSaturationMetrics[saturationType],
    }
  ).addTarget(
    promQuery.target(
      expr='0.85',
      legendFormat='Soft SLO',
    )
  ).addTarget(
    promQuery.target(
      expr='0.9',
      legendFormat='Hard SLO',
    )
  ).addSeriesOverride(
    seriesOverrides.hardSlo
  ).addSeriesOverride(
    seriesOverrides.softSlo
  );

stageGroupDashboards.dashboard('runner', components=[], displayEmptyGuidance=false)
.addTemplates(filters)
.addPanels(
  keyMetrics.headlineMetricsRow(
    'ci-runners',
    startRow=1000,
    selectorHash=selectorHash,
    showDashboardListPanel=true
  )
).addPanels(
  layout.rowGrid(
    'Job Limits',
    [
      runningJobSaturation(aggregators=['shard'], saturationType='concurrent'),
      runningJobSaturation(aggregators=['instance'], saturationType='concurrent'),
      runningJobSaturation(aggregators=['instance', 'runner'], saturationType='limit'),
    ],
    startRow=2000
  )
).stageGroupDashboardTrailer()
