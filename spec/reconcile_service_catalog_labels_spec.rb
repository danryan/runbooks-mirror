# frozen_string_literal: true

require 'spec_helper'

require_relative '../scripts/reconcile_service_catalog_labels'

describe ReconcileServiceCatalogLabels do
  subject(:reconcile) { described_class.new(service_catalog_path, logger).call }

  let(:tmp_dir) { Dir.mktmpdir }
  let(:service_catalog_path) { "#{tmp_dir}/service-catalog.yml" }
  let(:service_catalog_yml) do
    <<~YAML
      services:
        - name: Foo
          label: Foo
        - name: Bar
          label: Bar
    YAML
  end

  let(:logger) { Logger.new(StringIO.new) }

  before do
    File.write(service_catalog_path, service_catalog_yml)
    allow(ENV).to receive(:[]).with("GITLAB_RECONCILE_SERVICE_LABELS_TOKEN").and_return('blablabla')
  end

  after do
    FileUtils.remove_entry tmp_dir
  end

  context 'when list labels API returns an error' do
    before do
      stub_request(:get, described_class::LABELS_API).with(query: { search: "Service::", page: 1, per_page: 100 })
        .to_return(status: [500, "Internal Server Error"])
    end

    it 'raises an error' do
      expect { reconcile }.to raise_error("List group labels API failed. Status: 500 Message: Internal Server Error")
    end
  end

  context 'when all labels in service catalog already exist in labels API' do
    before do
      stub_request(:get, described_class::LABELS_API).with(
        query: { search: "Service::", page: 1, per_page: 100 }).to_return(
          status: 200,
          body: [
            {
              id: 123,
              name: "Service::Foo"
            },
            {
              id: 456,
              name: "Service::Bar"
            }
          ].to_json)
    end

    it 'does not try to call create label API' do
      expect(a_request(:post, described_class::LABELS_API)).not_to have_been_made

      reconcile
    end
  end

  context 'when some labels in service catalog are missing in labels API' do
    before do
      stub_request(:get, described_class::LABELS_API).with(
        query: { search: "Service::", page: 1, per_page: 100 }).to_return(
          status: 200,
          body: [
            {
              id: 123,
              name: "Service::Foo"
            }
          ].to_json)
    end

    it 'creates those labels' do
      stub_request(:post, described_class::LABELS_API).with(
        body: {
          name: "Service::Bar",
          color: described_class::LABEL_COLOR,
          description: "Autogenerated label for service Bar"
        }).to_return(
          status: 200,
          body: {
            id: 456,
            name: "Service::Bar"
          }.to_json
        )
      expect(logger).to receive(:info).with(/Created label Service::Bar/)

      reconcile
    end

    context 'when create label API returns error' do
      before do
        stub_request(:post, described_class::LABELS_API).with(
          body: hash_including({ name: "Service::Bar", color: described_class::LABEL_COLOR })).to_return(
          status: [500, "Internal Server Error"]
        )
      end

      it 'raises an error' do
        expect { reconcile }.to raise_error("Create group label API failed. Status: 500 Message: Internal Server Error")
      end
    end
  end

  context 'when GITLAB_RECONCILE_SERVICE_LABELS_TOKEN is not provided' do
    before do
      allow(ENV).to receive(:[]).with("GITLAB_RECONCILE_SERVICE_LABELS_TOKEN").and_return(nil)
    end

    it 'logs an error without exception' do
      expect(logger).to receive(:error).with(/Missing environment variable GITLAB_RECONCILE_SERVICE_LABELS_TOKEN/)
      expect { reconcile }.not_to raise_error
    end
  end
end
