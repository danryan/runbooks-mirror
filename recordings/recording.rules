# HAProxy responses by backend and code.
backend_code:haproxy_server_http_responses_total:irate1m = sum(irate(haproxy_server_http_responses_total[1m])) without (fqdn, instance)

# HAProxy frontend traffic bandwidth.
job_frontend:haproxy_frontend_bytes_in_total:irate1m = sum(irate(haproxy_frontend_bytes_in_total[1m])) without (fqdn, instance)

# HAProxy error rates.
job_frontend:haproxy_frontend_request_errors_total:irate1m = sum(irate(haproxy_frontend_request_errors_total[1m])) without (fqdn, instance)
job_backend:haproxy_backend_response_errors_total:irate1m = sum(irate(haproxy_backend_response_errors_total[1m])) without (fqdn, instance)

# Postgres rates for uptime SLA calculation  
postgres:pg_stat_database_xact_commit:rate1m = sum(rate(pg_stat_database_xact_commit[5m])) without (datname,datid)
postgres:pg_stat_database_xact_rollback:rate1m = sum(rate(pg_stat_database_xact_rollback[5m])) without (datname,datid)
postgres:pg_xlog_bytes_per_second:rate1m = rate(pg_xlog_position_bytes[5m])
postgres:pg_txid_per_second:rate1m = rate(pg_txid_current[5m])

# GRPC calls handled by Gitaly
gitaly:grpc_server_handled_total:rate1m = sum(rate(grpc_server_handled_total[1m])) by (job, grpc_method, environment)
gitaly:grpc_server_handled_total:error_rate1m = sum(rate(grpc_server_handled_total{grpc_code!="OK"}[1m])) by (job, grpc_method, environment)
gitaly:grpc_server_handled_total:error_avg_rate12h = avg_over_time(gitaly:grpc_server_handled_total:error_rate1m[12h])
gitaly:grpc_server_handled_total:error_rate1m_stddev_over_time12h = stddev_over_time(gitaly:grpc_server_handled_total:error_rate1m[12h])
gitaly:grpc_server_handled_total:instance_error_rate1m = sum(rate(grpc_server_handled_total{grpc_code!="OK"}[1m])) by (job, instance, environment)
gitaly:grpc_server_handling_seconds_bucket:rate1m = sum(rate(grpc_server_handling_seconds_bucket[1m])) by (le,fqdn,job,grpc_method, environment)
gitaly_instance_grpc_method_code:grpc_server_handled_total:irate1m = sum(irate(grpc_server_handled_total[1m])) without (grpc_service, grpc_type, environment)

# GRPC average latency rules. Used in latency anomaly detection
gitaly:grpc_server_handling_seconds:avg5m = avg(rate(grpc_server_handling_seconds_sum[5m]) / rate(grpc_server_handling_seconds_count[5m]) > 0) by (fqdn, job, grpc_method, environment)
gitaly:grpc_server_handling_seconds:avg24h = avg_over_time(gitaly:grpc_server_handling_seconds:avg5m[24h])
gitaly:grpc_server_handling_seconds:avg5m_stddev_over_time24h = stddev_over_time(gitaly:grpc_server_handling_seconds:avg5m[24h])

# process_cpu_seconds_rate
process_cpu_seconds_total:rate1m = rate(process_cpu_seconds_total[1m])
