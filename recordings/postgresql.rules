# Postgres transaction rates and xlog rates for alerting and uptime calculation

postgres:pg_stat_database_xact_commit:rate1m = sum(rate(pg_stat_database_xact_commit[1m])) without (datname,datid)
postgres:pg_stat_database_xact_rollback:rate1m = sum(rate(pg_stat_database_xact_rollback[1m])) without (datname,datid)
postgres:pg_xlog_bytes_per_second:rate1m = rate(pg_xlog_position_bytes[1m])
postgres:pg_txid_per_second:rate1m = rate(pg_txid_current[1m])

postgres:pg_stat_database_xact_commit:rate5m = sum(rate(pg_stat_database_xact_commit[5m])) without (datname,datid)
postgres:pg_stat_database_xact_rollback:rate5m = sum(rate(pg_stat_database_xact_rollback[5m])) without (datname,datid)
postgres:pg_xlog_bytes_per_second:rate5m = rate(pg_xlog_position_bytes[5m])
postgres:pg_txid_per_second:rate5m = rate(pg_txid_current[5m])

# This is replication lag calculated independently from the
# database. It compares the xlog position reported by the separate
# databases rather than depend on the replicas to have up-to-date info
# from the primary

postgres:pg_replication_lag_bytes = (pg_xlog_position_bytes and pg_replication_is_replica == 0.0) - on (environment) group_right(instance)  (pg_xlog_position_bytes and pg_replication_is_replica == 1.0)


# this is just a count of how many databases to expect per environment to fill in the up metric 
postgres:databases = count(pg_exporter_scrapes_total) by (environment)


# Define postgres:up to be 0 if there's ay alerts firing or 1 if there are no alerts

# To allow for bringing up new replicas which will inevitably be
# triggering alerts until they're fully alive we have to test three
# things separately here:

# 3. At least two replica databases with no alerts on them
# 2. No alerts on the primary database
# 1. No global alerts for the environment as a whole

# Note the inner vector will return an empty vector for any
# environment with problems so we need the final expression to ensure
# it is present and evaluates to 0 for such environments.

postgres:up = ( 
		count(pg_replication_is_replica == 1.0 unless on (fqdn) ALERTS{alertname=~"PostgreSQL_.*",alertstate="firing",severity!="info"}) by (environment) >= 2
	  and on (environment)
		count(pg_replication_is_replica == 0.0 unless on (fqdn) ALERTS{alertname=~"PostgreSQL_.*",alertstate="firing",severity!="info"}) by (environment) == 1
	  unless on (environment)
		count(ALERTS{alertname=~"PostgreSQL_.*",alertstate="firing",severity!="info",fqdn=""}) by (environment) > 0
	) > bool 0
	or on (environment)
       postgres:databases == bool 0
