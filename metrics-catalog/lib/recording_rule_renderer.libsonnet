local recordingRules = import './recording_rules.libsonnet';

local AGGREGATION_LABELS = 'environment, tier, type, stage';

// Generates apdex score recording rules for a component definition
local generatApdexRules(componentDefinition, labels) =
  if std.objectHas(componentDefinition, 'apdex') then
    componentDefinition.apdex.apdexRecordingRules(AGGREGATION_LABELS, labels)
  else
    [];

// Generates an request rate recording rule for a component definition
local generateRequestRateRules(componentDefinition, labels) =
  if std.objectHas(componentDefinition, 'requestRate') then
    componentDefinition.requestRate.requestRateRecordingRules(AGGREGATION_LABELS, labels)
  else
    [];


// Generates an request rate recording rule for a component definition
local generateErrorRateRules(componentDefinition, labels) =
  if std.objectHas(componentDefinition, 'errorRate') then
    componentDefinition.errorRate.errorRateRecordingRules(AGGREGATION_LABELS, labels)
  else
    [];

local generateServiceSLORules(serviceDefinition) =
  std.prune([
    if std.objectHas(serviceDefinition.slos, 'apdexRatio') then
      recordingRules.minApdexSLO(
        labels={
          type: serviceDefinition.type,
          tier: serviceDefinition.tier,
        },
        expr='%.4f' % [serviceDefinition.slos.apdexRatio]
      )
    else null,

    if std.objectHas(serviceDefinition.slos, 'errorRatio') then
      recordingRules.maxErrorsSLO(
        labels={
          type: serviceDefinition.type,
          tier: serviceDefinition.tier,
        },
        expr='%.4f' % [serviceDefinition.slos.errorRatio],
      )
    else null,
  ]);

local generateComponentRecordingRules(componentName, serviceDefinition, componentDefinition) =
  local staticLabels =
    if std.objectHas(componentDefinition, 'staticLabels') then
      componentDefinition.staticLabels
    else
      {};

  local labels = {
    tier: serviceDefinition.tier,
    type: serviceDefinition.type,
    component: componentName,
  } + staticLabels;

  generatApdexRules(componentDefinition, labels) +
  generateRequestRateRules(componentDefinition, labels) +
  generateErrorRateRules(componentDefinition, labels);


local generateServiceRecordingRules(serviceDefinition) =
  local components = serviceDefinition.components;

  std.flattenArrays(
    std.map(
      function(componentName) generateComponentRecordingRules(componentName, serviceDefinition, components[componentName]),
      std.objectFields(components)
    )
  );

{
  yaml(services)::
    std.manifestYamlDoc({
      groups: [
        {
          name: 'Autogenerated Service SLOs',
          interval: '5m',
          rules: std.flattenArrays(std.map(generateServiceSLORules, services)),
        },
        {
          name: 'Autogenerated Component Recording Rules',
          interval: '1m',
          rules: std.flattenArrays(std.map(generateServiceRecordingRules, services)),
        },
      ],
    }),

}
