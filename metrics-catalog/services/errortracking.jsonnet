/*

clamp_max(
    sum by ()(
        sum by (stage_group,component) (
            label_replace(
                sum_over_time(
                    gitlab:component:stage_group:execution:apdex:success:rate_1h{
                        environment=\"$environment\",
                        monitor=\"global\",
                        stage=\"$stage\",
                        stage_group=\"observability\"
                    }[$__range]
                ), 'sli_kind', 'apdex', '', ''
            )
            or
            label_replace(
                sum_over_time(
                    gitlab:component:stage_group:execution:ops:rate_1h{
                        environment=\"$environment\",
                        monitor=\"global\",
                        stage=\"$stage\",
                        stage_group=\"observability\"
                    }[$__range]
                )
                -
                sum_over_time(
                    gitlab:component:stage_group:execution:error:rate_1h{
                        environment=\"$environment\",
                        monitor=\"global\",
                        stage=\"$stage\",
                        stage_group=\"observability\"
                    }[$__range]
                )
            ), 'sli_kind', 'error', '', ''
        ) unless on (stage_group,component) gitlab:ignored_component:stage_group\n  )\n  /\n  sum by ()(\n    sum by (stage_group,component) (\n      label_replace(\n        sum_over_time(\n          gitlab:component:stage_group:execution:apdex:weight:score_1h{environment=\"$environment\",monitor=\"global\",stage=\"$stage\",stage_group=\"observability\"}[$__range]\n        ),\n        'sli_kind', 'apdex', '', ''\n      )\n      or\n      label_replace(\n        sum_over_time(\n          gitlab:component:stage_group:execution:ops:rate_1h{environment=\"$environment\",monitor=\"global\",stage=\"$stage\",stage_group=\"observability\"}[$__range]\n        )\n        and sum_over_time(gitlab:component:stage_group:execution:error:rate_1h{environment=\"$environment\",monitor=\"global\",stage=\"$stage\",stage_group=\"observability\"}[$__range]),\n        'sli_kind', 'error', '', ''\n      )\n    ) unless on (stage_group,component) gitlab:ignored_component:stage_group\n  ),\n1)\n",
      "format": "time_series",

*/

local metricsCatalog = import 'servicemetrics/metrics.libsonnet';
local toolingLinks = import 'toolinglinks/toolinglinks.libsonnet';

local rateMetric = metricsCatalog.rateMetric;

metricsCatalog.serviceDefinition({
  type: 'errortracking',
  tier: 'sv',
  monitoringThresholds: {},
  serviceDependencies: {
    api: true,
  },
  provisioning: {
    kubernetes: true,
    vms: false,
  },
  serviceLevelIndicators: {
    errortracking: {
      severity: 's3',  // Don't page SREs for this SLI
      userImpacting: false,
      serviceAggregation: false,
      team: 'observability',
      description: |||
        Error Tracking allows developers to discover and view errors generated by their application
      |||,

      local errortrackingSelector = {
        team: 'observability',
        cluster: 'opstrace-prod',
        job: 'default/traefik',
        service: { re: '.*errortracking-api.*' },
      },

      requestRate: rateMetric(
        counter='traefik_service_requests_total',
        selector=errortrackingSelector,
        useRecordingRuleRegistry=false,
      ),

      errorRate: rateMetric(
        counter='traefik_service_requests_total',
        selector=errortrackingSelector {
          code: { re: '^5.*' },
        },
        useRecordingRuleRegistry=false,
      ),

      significantLabels: [],

      toolingLinks: [
        toolingLinks.kibana(title='Rails', index='rails'),
      ],
    },
  },
})
