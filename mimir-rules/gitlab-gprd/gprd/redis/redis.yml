groups:
- name: redis.rules
  rules:
  - record: cmd:redis_command_call_duration_seconds_count:irate1m
    expr: >
      sum by (cmd,environment) (
        irate(redis_command_call_duration_seconds_count{env="gprd"}[1m])
      )
  - record: redis:keyspace_hits:irate1m
    expr: irate(redis_keyspace_hits_total{env="gprd"}[1m])
  - record: redis:keyspace_misses:irate1m
    expr: irate(redis_keyspace_misses_total{env="gprd"}[1m])
  - record: redis:net_input_bytes:irate1m
    expr: irate(redis_net_input_bytes_total{env="gprd"}[1m])
  - record: redis:net_output_bytes:irate1m
    expr: irate(redis_net_output_bytes_total{env="gprd"}[1m])
  - record: redis:expired_keys:irate1m
    expr: irate(redis_expired_keys_total{env="gprd"}[1m])
  - record: redis:evicted_keys:irate1m
    expr: irate(redis_evicted_keys_total{env="gprd"}[1m])
  - record: redis:commands_processed:irate1m
    expr: irate(redis_commands_processed_total{env="gprd"}[1m])
  - record: redis:connections_received:irate1m
    expr: irate(redis_connections_received_total{env="gprd"}[1m])
  - record: gitlab:redis_disconnected_slaves
    expr: >
      count without (fqdn, instance, job, zone) (redis_connected_slaves{env="gprd"}) -
      sum without (fqdn, instance, job, zone) (redis_connected_slaves{env="gprd"}) -
      1
  - record: gitlab:redis_cluster_nodes:count
    expr: count without (fqdn,instance, zone) (up{job="scrapeConfig/monitoring/prometheus-agent-redis", env="gprd"})
  - record: gitlab:redis_master
    expr: redis_connected_slaves{env="gprd"} > 1
  - record: instance:redis_cpu_usage:rate1m
    expr: >
      sum by (env, environment, type, fqdn, instance, pod) (
        rate(namedprocess_namegroup_thread_cpu_seconds_total{type=~"redis.*", groupname="redis-server", threadname="redis-server", env="gprd"}[1m]) or rate(container_cpu_usage_seconds_total:labeled{type=~"redis.*", env="gprd"}[1m])
      )
  - record: gitlab:redis_rdb_last_save_in_seconds
    expr: min(time() - redis_rdb_last_save_timestamp_seconds{env="gprd"}) by (env, environment,type)
  - record: gitlab:redis_cluster_redirections:irate1m
    labels:
      type: redis_cluster_ratelimiting
    expr: >
      sum by (environment, redirection_type) (
        rate(gitlab_redis_client_redirections_total{storage="cluster_rate_limiting", env="gprd"}[1m])
      )
- name: redis.alerts
  rules:
  - alert: RedisLossOfRedundancy
    for: 2h
    expr: |
      sum by (environment, tier, type, stage, shard) (redis_instance_info{role="slave", env="gprd"}) < 2
    labels:
      pager: pagerduty
      severity: s2
      alert_type: cause
    annotations:
      title: Less than 2 agents in {{ $labels.type }} cluster
      description: |
        There should be at least 2 redis agents per cluster in the {{ $labels.type }} cluster.
        This likely means that we've lost a redis agent for some reason.
  - alert: SentinelLossOfRedundancy
    for: 2h
    expr: |
      (sum by (environment, tier, type, stage, shard) (namedprocess_namegroup_num_procs{groupname="redis-sentinel", env="gprd"})) < 3
    labels:
      pager: pagerduty
      severity: s2
      alert_type: cause
    annotations:
      title: Less than 100% of sentinel processes running in the {{ $labels.type }} cluster
      description: |
        There should be a single sentinel process per VM in the {{ $labels.type }} cluster.
        This likely means that sentinel has stopped on one of the {{ .Labels.type }} sentinel nodes.
  - alert: redisRdbSaveDelayed
    expr: gitlab:redis_rdb_last_save_in_seconds{type=~"redis|redis-sessions|redis-sidekiq|redis-tracechunks", env="gprd"} >= 3600
    for: 5m
    labels:
      pager: pagerduty
      severity: s1
      alert_type: symptom
    annotations:
      description: Redis RDB snapshots might not be working
      runbook: docs/redis/redis-rdb-snapshots.md
      title: Last Redis RDB snapshot was {{ .Value | humanizeDuration }} ago for env {{ $labels.environment }}.
