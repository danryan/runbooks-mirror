# WARNING. DO NOT EDIT THIS FILE BY HAND. USE ./mimir-rules-jsonnet/saturation.jsonnet TO GENERATE IT
# YOUR CHANGES WILL BE OVERRIDDEN
groups:
- name: Saturation Rules (autogenerated)
  interval: 1m
  rules:
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_container_cpu
    expr: |
      quantile by(env, environment, tier, type, stage, shard, pod, container) (
        0.99,
        clamp_min(
          clamp_max(
            (
              sum by (env, environment, tier, type, stage, shard, pod, container) (
                rate(container_cpu_usage_seconds_total:labeled{container!="", container!="POD", env="gstg",type="plantuml"}[1h])
              )
              unless on(env, environment, tier, type, stage, shard, pod, container) (
                last_over_time(container_spec_cpu_quota:labeled{container!="", container!="POD", env="gstg",type="plantuml"}[1h])
              )
            )
            /
            sum by(env, environment, tier, type, stage, shard, pod, container) (
              kube_pod_container_resource_requests:labeled{container!="", container!="POD", resource="cpu", env="gstg",type="plantuml"}
            )
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_container_cpu_limit
    expr: |
      max by(env, environment, tier, type, stage, shard, pod, container) (
        clamp_min(
          clamp_max(
            sum by (env, environment, tier, type, stage, shard, pod, container) (
              rate(container_cpu_usage_seconds_total:labeled{container!="", container!="POD", env="gstg",type="plantuml"}[5m])
            )
            /
            sum by(env, environment, tier, type, stage, shard, pod, container) (
              container_spec_cpu_quota:labeled{container!="", container!="POD", env="gstg",type="plantuml"}
              /
              container_spec_cpu_period:labeled{container!="", container!="POD", env="gstg",type="plantuml"}
            )
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_container_rss
    expr: |
      max by(env, environment, tier, type, stage, shard) (
        clamp_min(
          clamp_max(
            container_memory_rss:labeled{container!="", container!="POD", env="gstg",type="plantuml"}
            /
            (container_spec_memory_limit_bytes:labeled{container!="", container!="POD", env="gstg",type="plantuml"} > 0)
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_container_throttling
    expr: |
      quantile by(env, environment, tier, type, stage, shard, pod, container) (
        0.99,
        clamp_min(
          clamp_max(
            avg by (env, environment, tier, type, stage, shard, pod, container)(
              rate(container_cpu_cfs_throttled_periods_total:labeled{container!="", env="gstg",type="plantuml"}[5m])
              /
              rate(container_cpu_cfs_periods_total:labeled{container!="", env="gstg",type="plantuml"}[5m])
            )
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_horizontalpodautoscaler_desired_replicas
    expr: |
      max by(env, environment, tier, type, stage, shard, horizontalpodautoscaler, shard) (
        clamp_min(
          clamp_max(
            kube_horizontalpodautoscaler_status_desired_replicas:labeled{env="gstg",type="plantuml", shard!~"database-throttled|elasticsearch|gitaly-throttled|urgent-authorized-projects", namespace!~"pubsubbeat"}
            /
            kube_horizontalpodautoscaler_spec_max_replicas:labeled{env="gstg",type="plantuml", shard!~"database-throttled|elasticsearch|gitaly-throttled|urgent-authorized-projects", namespace!~"pubsubbeat"}
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: open_fds
    expr: |
      max by(env, environment, tier, type, stage, shard, job, instance) (
        clamp_min(
          clamp_max(
            (
              process_open_fds{env="gstg",type="plantuml"}
              /
              process_max_fds{env="gstg",type="plantuml"}
            )
            or
            (
              ruby_file_descriptors{env="gstg",type="plantuml"}
              /
              ruby_process_max_fds{env="gstg",type="plantuml"}
            )
            ,
            1)
        ,
        0)
      )
