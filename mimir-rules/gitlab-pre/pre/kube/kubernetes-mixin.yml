"groups":
- "name": "k8s.rules"
  "rules":
  - "expr": |
      sum(rate(container_cpu_usage_seconds_total{job="kubelet", image!="", container!="POD", env="pre"}[5m])) by (namespace, cluster, env, environment, monitor, prometheus, provider, region)
    "record": "namespace:container_cpu_usage_seconds_total:sum_rate"
  - "expr": |
      sum by (namespace, pod, container, cluster, env, environment, monitor, prometheus, provider, region) (
        rate(container_cpu_usage_seconds_total{job="kubelet", image!="", container!="POD", env="pre"}[5m])
      ) * on (namespace, pod) group_left(node) max by(namespace, pod, node) (kube_pod_info)
    "record": "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate"
  - "expr": |
      container_memory_working_set_bytes{job="kubelet", image!="", env="pre"}
      * on (namespace, pod) group_left(node) max by(namespace, pod, node) (kube_pod_info)
    "record": "node_namespace_pod_container:container_memory_working_set_bytes"
  - "expr": |
      container_memory_rss{job="kubelet", image!="", env="pre"}
      * on (namespace, pod) group_left(node) max by(namespace, pod, node) (kube_pod_info)
    "record": "node_namespace_pod_container:container_memory_rss"
  - "expr": |
      container_memory_cache{job="kubelet", image!="", env="pre"}
      * on (namespace, pod) group_left(node) max by(namespace, pod, node) (kube_pod_info)
    "record": "node_namespace_pod_container:container_memory_cache"
  - "expr": |
      container_memory_swap{job="kubelet", image!="", env="pre"}
      * on (namespace, pod) group_left(node) max by(namespace, pod, node) (kube_pod_info)
    "record": "node_namespace_pod_container:container_memory_swap"
  - "expr": |
      sum(container_memory_usage_bytes{job="kubelet", image!="", container!="POD", env="pre"}) by (namespace, cluster, env, environment, monitor, prometheus, provider, region)
    "record": "namespace:container_memory_usage_bytes:sum"
  - "expr": |
      sum by (namespace, label_name, resource, unit) (
          sum(kube_pod_container_resource_requests{job="kube-state-metrics", env="pre"} * on (endpoint, instance, job, namespace, pod, service) group_left(phase) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)) by (namespace, pod, resource, unit)
        * on (namespace, pod)
          group_left(label_name) kube_pod_labels{job="kube-state-metrics", env="pre"}
      )
    "record": "namespace:kube_pod_container_resource_requests:sum"
  - "expr": |
      sum(
        label_replace(
          label_replace(
            kube_pod_owner{job="kube-state-metrics", owner_kind="ReplicaSet", env="pre"},
            "replicaset", "$1", "owner_name", "(.*)"
          ) * on(replicaset, namespace) group_left(owner_name) kube_replicaset_owner{job="kube-state-metrics", env="pre"},
          "workload", "$1", "owner_name", "(.*)"
        )
      ) by (namespace, workload, pod)
    "labels":
      "workload_type": "deployment"
    "record": "mixin_pod:workload"
  - "expr": |
      sum(
        label_replace(
          kube_pod_owner{job="kube-state-metrics", owner_kind="DaemonSet", env="pre"},
          "workload", "$1", "owner_name", "(.*)"
        )
      ) by (namespace, workload, pod)
    "labels":
      "workload_type": "daemonset"
    "record": "mixin_pod:workload"
  - "expr": |
      sum(
        label_replace(
          kube_pod_owner{job="kube-state-metrics", owner_kind="StatefulSet", env="pre"},
          "workload", "$1", "owner_name", "(.*)"
        )
      ) by (namespace, workload, pod)
    "labels":
      "workload_type": "statefulset"
    "record": "mixin_pod:workload"
- "name": "node.rules"
  "rules":
  - "expr": |
      sum by (env, environment, cluster, monitor, prometheus, provider, region) (
        min by (node, env, environment, cluster, monitor, prometheus, provider, region) (kube_pod_info{env="pre"})
      )
    "labels":
      "type": "kube"
    "record": ":kube_pod_info_node_count:"
  - "expr": |
      max(label_replace(kube_pod_info{job="kube-state-metrics", env="pre"}, "pod", "$1", "pod", "(.*)")) by (node, namespace, cluster, pod, env, environment, monitor, prometheus, region, provider, type)
    "record": "node_namespace_pod:kube_pod_info:"
  - "expr": |
      count by (node, cluster, env, environment, monitor, prometheus, provider, region, type) (sum by (node, cpu, cluster, env, environment, monitor, prometheus, provider, region, type) (
        node_cpu_seconds_total{job="node-exporter", env="pre"}
      * on (namespace, pod) group_left(node)
        node_namespace_pod:kube_pod_info:
      ))
    "record": "node:node_num_cpu:sum"
  - "expr": |
      sum by (cluster, env, environment, monitor, prometheus, provider, region, stage, type) (
        node_memory_MemAvailable_bytes{job="node-exporter", env="pre"} or
        (
          node_memory_Buffers_bytes{job="node-exporter", env="pre"} +
          node_memory_Cached_bytes{job="node-exporter", env="pre"} +
          node_memory_MemFree_bytes{job="node-exporter", env="pre"} +
          node_memory_Slab_bytes{job="node-exporter", env="pre"}
        )
      )
    "record": ":node_memory_MemAvailable_bytes:sum"
